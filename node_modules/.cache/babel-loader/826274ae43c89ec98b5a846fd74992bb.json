{"ast":null,"code":"import { ADD_NEW_RECIPE, SET_RECIPES, SET_RECIPES_ALL, CLEAR_REDUCER, STAR_RECIPE, SET_STARRED_RECIPES, setRecipeImages, SET_RECIPE_IMAGES } from './actions';\nimport Axios from 'axios';\nimport { nanoid } from 'nanoid';\nconst initialState = {\n  userRecipes: {},\n  recipes: {},\n  starred_recipes: {}\n};\nexport const recipesReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case STAR_RECIPE:\n      {\n        switch (action.payload.starred) {\n          case true:\n            {\n              let userRecipeCopy = { ...state.userRecipes\n              };\n              let recipesCopy = { ...state.recipes\n              };\n              const recipeId = action.payload.recipeId;\n\n              if (recipeId in userRecipeCopy) {\n                userRecipeCopy[recipeId].rating -= 1;\n              }\n\n              if (recipeId in recipesCopy) {\n                recipesCopy[recipeId].rating -= 1;\n              }\n\n              return { ...state,\n                userRecipes: userRecipeCopy,\n                recipes: recipesCopy\n              };\n            }\n\n          case false:\n            {\n              let userRecipeCopy = { ...state.userRecipes\n              };\n              let recipesCopy = { ...state.recipes\n              };\n              const recipeId = action.payload.recipeId;\n\n              if (recipeId in userRecipeCopy) {\n                userRecipeCopy[recipeId].rating += 1;\n              }\n\n              if (recipeId in recipesCopy) {\n                recipesCopy[recipeId].rating += 1;\n              }\n\n              return { ...state,\n                userRecipes: userRecipeCopy,\n                recipes: recipesCopy\n              };\n            }\n\n          default:\n            {\n              return state;\n            }\n        }\n      }\n\n    case SET_RECIPE_IMAGES:\n      {\n        return { ...state,\n          userRecipes: { ...state.userRecipes,\n            [action.payload.id]: { ...state.userRecipes[action.payload.id],\n              images: [...action.payload.images]\n            }\n          }\n        };\n      }\n\n    case SET_RECIPES_ALL:\n      {\n        console.log(action.payload);\n        const settedRecipes = {};\n        action.payload.forEach(item => {\n          settedRecipes[item.id] = {\n            comments: JSON.parse(item.comments),\n            cook: JSON.parse(item.cook),\n            description: JSON.parse(item.description),\n            id: item.id,\n            images: JSON.parse(item.images) || [],\n            lstOfProducts: JSON.parse(item.lstOfProducts),\n            products: JSON.parse(item.products),\n            rating: item.rating,\n            time: item.time,\n            title: item.title,\n            userId: item.userId\n          };\n        });\n        return { ...state,\n          recipes: { ...state.recipes,\n            ...settedRecipes\n          }\n        };\n      }\n\n    case SET_STARRED_RECIPES:\n      {\n        const settedUserStarredRecipes = {};\n\n        if (action.payload) {\n          action.payload.forEach(item => {\n            settedUserStarredRecipes[item.id] = {\n              comments: JSON.parse(item.comments),\n              cook: JSON.parse(item.cook),\n              description: JSON.parse(item.description),\n              id: item.id,\n              images: JSON.parse(item.images) || {},\n              lstOfProducts: JSON.parse(item.lstOfProducts),\n              products: JSON.parse(item.products),\n              rating: item.rating,\n              time: item.time,\n              title: item.title,\n              userId: item.userId\n            };\n          });\n          return { ...state,\n            starred_recipes: { ...settedUserStarredRecipes\n            }\n          };\n        }\n\n        return state;\n      }\n\n    case SET_RECIPES:\n      {\n        const settedUserRecipes = {};\n        action.payload.forEach(item => {\n          settedUserRecipes[item.id] = {\n            comments: JSON.parse(item.comments),\n            cook: JSON.parse(item.cook),\n            description: JSON.parse(item.description),\n            id: item.id,\n            images: JSON.parse(item.images) || {},\n            lstOfProducts: JSON.parse(item.lstOfProducts),\n            products: JSON.parse(item.products),\n            rating: item.rating,\n            time: item.time,\n            title: item.title,\n            userId: item.userId\n          };\n        });\n        return { ...state,\n          userRecipes: { ...state.userRecipes,\n            ...settedUserRecipes\n          }\n        };\n      }\n\n    case ADD_NEW_RECIPE:\n      {\n        const images = {};\n        const paths = [];\n        Object.keys(action.payload.images).forEach(item => {\n          let image_path = `${nanoid(8)}${item}`;\n          paths.push(image_path);\n          images[image_path] = action.payload.images[item];\n        });\n        Axios.post('/reciepes/insert', { ...action.payload,\n          images: JSON.stringify(images)\n        }).then(res => {\n          if (res) {\n            setRecipeImages({\n              id: action.payload.id,\n              images: [...res.data]\n            });\n          }\n        });\n        return { ...state,\n          userRecipes: { ...state.userRecipes,\n            [action.payload.id]: { ...action.payload,\n              images: [...paths]\n            }\n          }\n        };\n      }\n\n    case CLEAR_REDUCER:\n      {\n        return { ...state,\n          userRecipes: {}\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};","map":{"version":3,"sources":["/Users/samilvaliahmetov/education/programming/schoolProject/my-app/main/client/src/store/recipes/reducer.js"],"names":["ADD_NEW_RECIPE","SET_RECIPES","SET_RECIPES_ALL","CLEAR_REDUCER","STAR_RECIPE","SET_STARRED_RECIPES","setRecipeImages","SET_RECIPE_IMAGES","Axios","nanoid","initialState","userRecipes","recipes","starred_recipes","recipesReducer","state","action","type","payload","starred","userRecipeCopy","recipesCopy","recipeId","rating","id","images","console","log","settedRecipes","forEach","item","comments","JSON","parse","cook","description","lstOfProducts","products","time","title","userId","settedUserStarredRecipes","settedUserRecipes","paths","Object","keys","image_path","push","post","stringify","then","res","data"],"mappings":"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","sourcesContent":["import { ADD_NEW_RECIPE, SET_RECIPES, SET_RECIPES_ALL, CLEAR_REDUCER, STAR_RECIPE, SET_STARRED_RECIPES, setRecipeImages, SET_RECIPE_IMAGES } from './actions';\nimport Axios from 'axios';\nimport { nanoid } from 'nanoid';\n\nconst initialState = {\n    userRecipes: {},\n    recipes: {},\n    starred_recipes: {},\n}\n\nexport const recipesReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case STAR_RECIPE: {\n            switch (action.payload.starred) {\n                case true: {\n                    let userRecipeCopy = {...state.userRecipes}\n                    let recipesCopy = {...state.recipes}\n                    const recipeId = action.payload.recipeId\n                    if (recipeId in userRecipeCopy) {\n                        userRecipeCopy[recipeId].rating -= 1;\n                    }\n                    if (recipeId in recipesCopy) {\n                        recipesCopy[recipeId].rating -= 1;\n                    }\n                    return {...state, userRecipes: userRecipeCopy, recipes: recipesCopy}\n                }\n                case false: {\n                    let userRecipeCopy = {...state.userRecipes}\n                    let recipesCopy = {...state.recipes}\n                    const recipeId = action.payload.recipeId\n                    if (recipeId in userRecipeCopy) {\n                        userRecipeCopy[recipeId].rating += 1;\n                    }\n                    if (recipeId in recipesCopy) {\n                        recipesCopy[recipeId].rating += 1;\n                    }\n                    return {...state, userRecipes: userRecipeCopy, recipes: recipesCopy}\n                }\n                default: {\n                    return state\n                }\n            }\n        }\n        case SET_RECIPE_IMAGES: {\n            return {\n                ...state,\n                userRecipes: {...state.userRecipes, [action.payload.id]: {...state.userRecipes[action.payload.id], images: [...action.payload.images]}}\n            }\n        }\n        case SET_RECIPES_ALL: {\n            console.log(action.payload)\n            const settedRecipes = {}\n            action.payload.forEach((item) => {\n                settedRecipes[item.id] = {\n                    comments: JSON.parse(item.comments),\n                    cook: JSON.parse(item.cook),\n                    description: JSON.parse(item.description),\n                    id: item.id,\n                    images: JSON.parse(item.images) || [],\n                    lstOfProducts: JSON.parse(item.lstOfProducts),\n                    products: JSON.parse(item.products),\n                    rating: item.rating,\n                    time: item.time,\n                    title: item.title,\n                    userId: item.userId\n                }\n            })\n            return {...state, recipes: {...state.recipes, ...settedRecipes}}\n        }\n        case SET_STARRED_RECIPES: {\n            const settedUserStarredRecipes = {}\n            if (action.payload) {\n                action.payload.forEach((item) => {\n                    settedUserStarredRecipes[item.id] = {\n                        comments: JSON.parse(item.comments),\n                        cook: JSON.parse(item.cook),\n                        description: JSON.parse(item.description),\n                        id: item.id,\n                        images: JSON.parse(item.images) || {},\n                        lstOfProducts: JSON.parse(item.lstOfProducts),\n                        products: JSON.parse(item.products),\n                        rating: item.rating,\n                        time: item.time,\n                        title: item.title,\n                        userId: item.userId\n                    }\n                })\n                return {...state, starred_recipes: {...settedUserStarredRecipes}}\n            }\n            return state\n        }\n        case SET_RECIPES: {\n            const settedUserRecipes = {}\n            action.payload.forEach((item) => {\n                settedUserRecipes[item.id] = {\n                    comments: JSON.parse(item.comments),\n                    cook: JSON.parse(item.cook),\n                    description: JSON.parse(item.description),\n                    id: item.id,\n                    images: JSON.parse(item.images) || {},\n                    lstOfProducts: JSON.parse(item.lstOfProducts),\n                    products: JSON.parse(item.products),\n                    rating: item.rating,\n                    time: item.time,\n                    title: item.title,\n                    userId: item.userId\n                }\n            })\n            return {...state, userRecipes: {...state.userRecipes, ...settedUserRecipes}}\n        }\n        case ADD_NEW_RECIPE: {\n            const images = {}\n            const paths = []\n            Object.keys(action.payload.images).forEach(item => {\n                let image_path = `${nanoid(8)}${item}`\n                paths.push(image_path)\n                images[image_path] = action.payload.images[item]\n            })\n            Axios.post('/reciepes/insert', {\n                ...action.payload, images: JSON.stringify(images)\n            }).then((res) => {\n                if (res) {\n                    setRecipeImages({id: action.payload.id, images: [...res.data]})\n                }\n            })\n            return {\n                ...state,\n                userRecipes: {...state.userRecipes, [action.payload.id]: {...action.payload, images: [...paths]}}\n            }\n        }\n        case CLEAR_REDUCER: {\n            return {...state, userRecipes: {}}\n        }\n        default: {\n            return state\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}