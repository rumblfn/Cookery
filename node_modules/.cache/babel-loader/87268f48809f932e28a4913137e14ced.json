{"ast":null,"code":"var util = require('../util');\n\nvar Rest = require('./rest');\n\nvar Json = require('./json');\n\nvar JsonBuilder = require('../json/builder');\n\nvar JsonParser = require('../json/parser');\n\nfunction populateBody(req) {\n  var builder = new JsonBuilder();\n  var input = req.service.api.operations[req.operation].input;\n\n  if (input.payload) {\n    var params = {};\n    var payloadShape = input.members[input.payload];\n    params = req.params[input.payload];\n\n    if (payloadShape.type === 'structure') {\n      req.httpRequest.body = builder.build(params || {}, payloadShape);\n      applyContentTypeHeader(req);\n    } else if (params !== undefined) {\n      // non-JSON payload\n      req.httpRequest.body = params;\n\n      if (payloadShape.type === 'binary' || payloadShape.isStreaming) {\n        applyContentTypeHeader(req, true);\n      }\n    }\n  } else {\n    req.httpRequest.body = builder.build(req.params, input);\n    applyContentTypeHeader(req);\n  }\n}\n\nfunction applyContentTypeHeader(req, isBinary) {\n  if (!req.httpRequest.headers['Content-Type']) {\n    var type = isBinary ? 'binary/octet-stream' : 'application/json';\n    req.httpRequest.headers['Content-Type'] = type;\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req); // never send body payload on GET/HEAD/DELETE\n\n  if (['GET', 'HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\n\nfunction extractError(resp) {\n  Json.extractError(resp);\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var rules = req.service.api.operations[req.operation].output || {};\n  var parser;\n  var hasEventOutput = operation.hasEventOutput;\n\n  if (rules.payload) {\n    var payloadMember = rules.members[rules.payload];\n    var body = resp.httpResponse.body;\n\n    if (payloadMember.isEventStream) {\n      parser = new JsonParser();\n      resp.data[payload] = util.createEventStream(AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body, parser, payloadMember);\n    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {\n      var parser = new JsonParser();\n      resp.data[rules.payload] = parser.parse(body, payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[rules.payload] = body;\n    } else {\n      resp.data[rules.payload] = payloadMember.toType(body);\n    }\n  } else {\n    var data = resp.data;\n    Json.extractData(resp);\n    resp.data = util.merge(data, resp.data);\n  }\n}\n/**\n * @api private\n */\n\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"sources":["/Users/samilvaliahmetov/education/programming/schoolProject/my-app/node_modules/aws-sdk/lib/protocol/rest_json.js"],"names":["util","require","Rest","Json","JsonBuilder","JsonParser","populateBody","req","builder","input","service","api","operations","operation","payload","params","payloadShape","members","type","httpRequest","body","build","applyContentTypeHeader","undefined","isStreaming","isBinary","headers","buildRequest","indexOf","method","extractError","resp","extractData","request","rules","output","parser","hasEventOutput","payloadMember","httpResponse","isEventStream","data","createEventStream","AWS","HttpClient","streamsApiVersion","stream","parse","toType","merge","module","exports"],"mappings":"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","sourcesContent":["var util = require('../util');\nvar Rest = require('./rest');\nvar Json = require('./json');\nvar JsonBuilder = require('../json/builder');\nvar JsonParser = require('../json/parser');\n\nfunction populateBody(req) {\n  var builder = new JsonBuilder();\n  var input = req.service.api.operations[req.operation].input;\n\n  if (input.payload) {\n    var params = {};\n    var payloadShape = input.members[input.payload];\n    params = req.params[input.payload];\n\n    if (payloadShape.type === 'structure') {\n      req.httpRequest.body = builder.build(params || {}, payloadShape);\n      applyContentTypeHeader(req);\n    } else if (params !== undefined) {\n      // non-JSON payload\n      req.httpRequest.body = params;\n      if (payloadShape.type === 'binary' || payloadShape.isStreaming) {\n        applyContentTypeHeader(req, true);\n      }\n    }\n  } else {\n    req.httpRequest.body = builder.build(req.params, input);\n    applyContentTypeHeader(req);\n  }\n}\n\nfunction applyContentTypeHeader(req, isBinary) {\n  if (!req.httpRequest.headers['Content-Type']) {\n    var type = isBinary ? 'binary/octet-stream' : 'application/json';\n    req.httpRequest.headers['Content-Type'] = type;\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req);\n\n  // never send body payload on GET/HEAD/DELETE\n  if (['GET', 'HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\n\nfunction extractError(resp) {\n  Json.extractError(resp);\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var rules = req.service.api.operations[req.operation].output || {};\n  var parser;\n  var hasEventOutput = operation.hasEventOutput;\n\n  if (rules.payload) {\n    var payloadMember = rules.members[rules.payload];\n    var body = resp.httpResponse.body;\n    if (payloadMember.isEventStream) {\n      parser = new JsonParser();\n      resp.data[payload] = util.createEventStream(\n        AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body,\n        parser,\n        payloadMember\n      );\n    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {\n      var parser = new JsonParser();\n      resp.data[rules.payload] = parser.parse(body, payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[rules.payload] = body;\n    } else {\n      resp.data[rules.payload] = payloadMember.toType(body);\n    }\n  } else {\n    var data = resp.data;\n    Json.extractData(resp);\n    resp.data = util.merge(data, resp.data);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"]},"metadata":{},"sourceType":"script"}