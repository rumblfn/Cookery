{"ast":null,"code":"var log = require('npmlog'),\n    execFile = require('child_process').execFile,\n    path = require('path');\n\nfunction findVS2017(callback) {\n  var ps = path.join(process.env.SystemRoot, 'System32', 'WindowsPowerShell', 'v1.0', 'powershell.exe');\n  var csFile = path.join(__dirname, 'Find-VS2017.cs');\n  var psArgs = ['-ExecutionPolicy', 'Unrestricted', '-NoProfile', '-Command', '&{Add-Type -Path \\'' + csFile + '\\';' + '[VisualStudioConfiguration.Main]::Query()}'];\n  log.silly('find vs2017', 'Running', ps, psArgs);\n  var child = execFile(ps, psArgs, {\n    encoding: 'utf8'\n  }, function (err, stdout, stderr) {\n    log.silly('find vs2017', 'PS err:', err);\n    log.silly('find vs2017', 'PS stdout:', stdout);\n    log.silly('find vs2017', 'PS stderr:', stderr);\n    if (err) return callback(new Error('Could not use PowerShell to find VS2017'));\n    var vsSetup;\n\n    try {\n      vsSetup = JSON.parse(stdout);\n    } catch (e) {\n      log.silly('find vs2017', e);\n      return callback(new Error('Could not use PowerShell to find VS2017'));\n    }\n\n    log.silly('find vs2017', 'vsSetup:', vsSetup);\n    if (vsSetup && vsSetup.log) log.verbose('find vs2017', vsSetup.log.trimRight());\n\n    if (!vsSetup || !vsSetup.path || !vsSetup.sdk) {\n      return callback(new Error('No usable installation of VS2017 found'));\n    }\n\n    log.verbose('find vs2017', 'using installation:', vsSetup.path);\n    callback(null, {\n      \"path\": vsSetup.path,\n      \"sdk\": vsSetup.sdk\n    });\n  });\n  child.stdin.end();\n}\n\nmodule.exports = findVS2017;","map":{"version":3,"sources":["/Users/samilvaliahmetov/education/programming/schoolProject/my-app/node_modules/node-gyp/lib/find-vs2017.js"],"names":["log","require","execFile","path","findVS2017","callback","ps","join","process","env","SystemRoot","csFile","__dirname","psArgs","silly","child","encoding","err","stdout","stderr","Error","vsSetup","JSON","parse","e","verbose","trimRight","sdk","stdin","end","module","exports"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAjB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CAAC,eAAD,CAAP,CAAyBC,QADxC;AAAA,IAEIC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAFlB;;AAIA,SAASG,UAAT,CAAoBC,QAApB,EAA8B;AAC5B,MAAIC,EAAE,GAAGH,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,CAAYC,UAAtB,EAAkC,UAAlC,EAA8C,mBAA9C,EACU,MADV,EACkB,gBADlB,CAAT;AAEA,MAAIC,MAAM,GAAGR,IAAI,CAACI,IAAL,CAAUK,SAAV,EAAqB,gBAArB,CAAb;AACA,MAAIC,MAAM,GAAG,CAAC,kBAAD,EAAqB,cAArB,EAAqC,YAArC,EACC,UADD,EACa,wBAAwBF,MAAxB,GAAiC,KAAjC,GACZ,4CAFD,CAAb;AAIAX,EAAAA,GAAG,CAACc,KAAJ,CAAU,aAAV,EAAyB,SAAzB,EAAoCR,EAApC,EAAwCO,MAAxC;AACA,MAAIE,KAAK,GAAGb,QAAQ,CAACI,EAAD,EAAKO,MAAL,EAAa;AAAEG,IAAAA,QAAQ,EAAE;AAAZ,GAAb,EACX,UAAUC,GAAV,EAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AACtCnB,IAAAA,GAAG,CAACc,KAAJ,CAAU,aAAV,EAAyB,SAAzB,EAAoCG,GAApC;AACAjB,IAAAA,GAAG,CAACc,KAAJ,CAAU,aAAV,EAAyB,YAAzB,EAAuCI,MAAvC;AACAlB,IAAAA,GAAG,CAACc,KAAJ,CAAU,aAAV,EAAyB,YAAzB,EAAuCK,MAAvC;AAEA,QAAIF,GAAJ,EACE,OAAOZ,QAAQ,CAAC,IAAIe,KAAJ,CAAU,yCAAV,CAAD,CAAf;AAEF,QAAIC,OAAJ;;AACA,QAAI;AACFA,MAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,MAAX,CAAV;AACD,KAFD,CAEE,OAAOM,CAAP,EAAU;AACVxB,MAAAA,GAAG,CAACc,KAAJ,CAAU,aAAV,EAAyBU,CAAzB;AACA,aAAOnB,QAAQ,CAAC,IAAIe,KAAJ,CAAU,yCAAV,CAAD,CAAf;AACD;;AACDpB,IAAAA,GAAG,CAACc,KAAJ,CAAU,aAAV,EAAyB,UAAzB,EAAqCO,OAArC;AAEA,QAAIA,OAAO,IAAIA,OAAO,CAACrB,GAAvB,EACEA,GAAG,CAACyB,OAAJ,CAAY,aAAZ,EAA2BJ,OAAO,CAACrB,GAAR,CAAY0B,SAAZ,EAA3B;;AAEF,QAAI,CAACL,OAAD,IAAY,CAACA,OAAO,CAAClB,IAArB,IAA6B,CAACkB,OAAO,CAACM,GAA1C,EAA+C;AAC7C,aAAOtB,QAAQ,CAAC,IAAIe,KAAJ,CAAU,wCAAV,CAAD,CAAf;AACD;;AAEDpB,IAAAA,GAAG,CAACyB,OAAJ,CAAY,aAAZ,EAA2B,qBAA3B,EAAkDJ,OAAO,CAAClB,IAA1D;AACAE,IAAAA,QAAQ,CAAC,IAAD,EAAO;AAAE,cAAQgB,OAAO,CAAClB,IAAlB;AAAwB,aAAOkB,OAAO,CAACM;AAAvC,KAAP,CAAR;AACD,GA3BmB,CAApB;AA6BAZ,EAAAA,KAAK,CAACa,KAAN,CAAYC,GAAZ;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB3B,UAAjB","sourcesContent":["var log = require('npmlog')\n  , execFile = require('child_process').execFile\n  , path = require('path')\n\nfunction findVS2017(callback) {\n  var ps = path.join(process.env.SystemRoot, 'System32', 'WindowsPowerShell',\n                     'v1.0', 'powershell.exe')\n  var csFile = path.join(__dirname, 'Find-VS2017.cs')\n  var psArgs = ['-ExecutionPolicy', 'Unrestricted', '-NoProfile',\n                '-Command', '&{Add-Type -Path \\'' + csFile + '\\';' +\n                '[VisualStudioConfiguration.Main]::Query()}']\n\n  log.silly('find vs2017', 'Running', ps, psArgs)\n  var child = execFile(ps, psArgs, { encoding: 'utf8' },\n           function (err, stdout, stderr) {\n    log.silly('find vs2017', 'PS err:', err)\n    log.silly('find vs2017', 'PS stdout:', stdout)\n    log.silly('find vs2017', 'PS stderr:', stderr)\n\n    if (err)\n      return callback(new Error('Could not use PowerShell to find VS2017'))\n\n    var vsSetup\n    try {\n      vsSetup = JSON.parse(stdout)\n    } catch (e) {\n      log.silly('find vs2017', e)\n      return callback(new Error('Could not use PowerShell to find VS2017'))\n    }\n    log.silly('find vs2017', 'vsSetup:', vsSetup)\n\n    if (vsSetup && vsSetup.log)\n      log.verbose('find vs2017', vsSetup.log.trimRight())\n\n    if (!vsSetup || !vsSetup.path || !vsSetup.sdk) {\n      return callback(new Error('No usable installation of VS2017 found'))\n    }\n\n    log.verbose('find vs2017', 'using installation:', vsSetup.path)\n    callback(null, { \"path\": vsSetup.path, \"sdk\": vsSetup.sdk })\n  })\n\n  child.stdin.end()\n}\n\nmodule.exports = findVS2017\n"]},"metadata":{},"sourceType":"script"}