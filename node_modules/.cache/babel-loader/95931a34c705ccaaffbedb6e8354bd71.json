{"ast":null,"code":"//////////////////////////////////////////\n// Needle -- HTTP Client for Node.js\n// Written by Tom√°s Pollak <tomas@forkhq.com>\n// (c) 2012-2020 - Fork Ltd.\n// MIT Licensed\n//////////////////////////////////////////\nvar fs = require('fs'),\n    http = require('http'),\n    https = require('https'),\n    url = require('url'),\n    stream = require('stream'),\n    debug = require('debug')('needle'),\n    stringify = require('./querystring').build,\n    multipart = require('./multipart'),\n    auth = require('./auth'),\n    cookies = require('./cookies'),\n    parsers = require('./parsers'),\n    decoder = require('./decoder'); //////////////////////////////////////////\n// variabilia\n\n\nvar version = require('../package.json').version;\n\nvar user_agent = 'Needle/' + version;\nuser_agent += ' (Node.js ' + process.version + '; ' + process.platform + ' ' + process.arch + ')';\nvar tls_options = 'agent pfx key passphrase cert ca ciphers rejectUnauthorized secureProtocol checkServerIdentity family'; // older versions of node (< 0.11.4) prevent the runtime from exiting\n// because of connections in keep-alive state. so if this is the case\n// we'll default new requests to set a Connection: close header.\n\nvar close_by_default = !http.Agent || http.Agent.defaultMaxSockets != Infinity; // see if we have Object.assign. otherwise fall back to util._extend\n\nvar extend = Object.assign ? Object.assign : require('util')._extend; // these are the status codes that Needle interprets as redirects.\n\nvar redirect_codes = [301, 302, 303, 307, 308]; //////////////////////////////////////////\n// decompressors for gzip/deflate/br bodies\n\nfunction bind_opts(fn, options) {\n  return fn.bind(null, options);\n}\n\nvar decompressors = {};\n\ntry {\n  var zlib = require('zlib'); // Enable Z_SYNC_FLUSH to avoid Z_BUF_ERROR errors (Node PR #2595)\n\n\n  var zlib_options = {\n    flush: zlib.Z_SYNC_FLUSH,\n    finishFlush: zlib.Z_SYNC_FLUSH\n  };\n  var br_options = {\n    flush: zlib.BROTLI_OPERATION_FLUSH,\n    finishFlush: zlib.BROTLI_OPERATION_FLUSH\n  };\n  decompressors['x-deflate'] = bind_opts(zlib.Inflate, zlib_options);\n  decompressors['deflate'] = bind_opts(zlib.Inflate, zlib_options);\n  decompressors['x-gzip'] = bind_opts(zlib.Gunzip, zlib_options);\n  decompressors['gzip'] = bind_opts(zlib.Gunzip, zlib_options);\n\n  if (typeof zlib.BrotliDecompress === 'function') {\n    decompressors['br'] = bind_opts(zlib.BrotliDecompress, br_options);\n  }\n} catch (e) {\n  /* zlib not available */\n} //////////////////////////////////////////\n// options and aliases\n\n\nvar defaults = {\n  // data\n  boundary: '--------------------NODENEEDLEHTTPCLIENT',\n  encoding: 'utf8',\n  parse_response: 'all',\n  // same as true. valid options: 'json', 'xml' or false/null\n  proxy: null,\n  // headers\n  headers: {},\n  accept: '*/*',\n  user_agent: user_agent,\n  // numbers\n  open_timeout: 10000,\n  response_timeout: 0,\n  read_timeout: 0,\n  follow_max: 0,\n  stream_length: -1,\n  // booleans\n  compressed: false,\n  decode_response: true,\n  parse_cookies: true,\n  follow_set_cookies: false,\n  follow_set_referer: false,\n  follow_keep_method: false,\n  follow_if_same_host: false,\n  follow_if_same_protocol: false,\n  follow_if_same_location: false\n};\nvar aliased = {\n  options: {\n    decode: 'decode_response',\n    parse: 'parse_response',\n    timeout: 'open_timeout',\n    follow: 'follow_max'\n  },\n  inverted: {}\n}; // only once, invert aliased keys so we can get passed options.\n\nObject.keys(aliased.options).map(function (k) {\n  var value = aliased.options[k];\n  aliased.inverted[value] = k;\n}); //////////////////////////////////////////\n// helpers\n\nfunction keys_by_type(type) {\n  return Object.keys(defaults).map(function (el) {\n    if (defaults[el] !== null && defaults[el].constructor == type) return el;\n  }).filter(function (el) {\n    return el;\n  });\n}\n\nfunction parse_content_type(header) {\n  if (!header || header === '') return {};\n  var found,\n      charset = 'utf8',\n      arr = header.split(';');\n  if (arr.length > 1 && (found = arr[1].match(/charset=(.+)/))) charset = found[1];\n  return {\n    type: arr[0],\n    charset: charset\n  };\n}\n\nfunction is_stream(obj) {\n  return typeof obj.pipe === 'function';\n}\n\nfunction get_stream_length(stream, given_length, cb) {\n  if (given_length > 0) return cb(given_length);\n  if (stream.end !== void 0 && stream.end !== Infinity && stream.start !== void 0) return cb(stream.end + 1 - (stream.start || 0));\n  fs.stat(stream.path, function (err, stat) {\n    cb(stat ? stat.size - (stream.start || 0) : null);\n  });\n}\n\nfunction resolve_url(href, base) {\n  if (url.URL) return new url.URL(href, base); // older Node version (< v6.13)\n\n  return url.resolve(base, href);\n}\n\nfunction pump_streams(streams, cb) {\n  if (stream.pipeline) return stream.pipeline.apply(null, streams.concat(cb));\n  var tmp = streams.shift();\n\n  while (streams.length) {\n    tmp = tmp.pipe(streams.shift());\n    tmp.once('error', function (e) {\n      cb && cb(e);\n      cb = null;\n    });\n  }\n} //////////////////////////////////////////\n// the main act\n\n\nfunction Needle(method, uri, data, options, callback) {\n  // if (!(this instanceof Needle)) {\n  //   return new Needle(method, uri, data, options, callback);\n  // }\n  if (typeof uri !== 'string') throw new TypeError('URL must be a string, not ' + uri);\n  this.method = method.toLowerCase();\n  this.uri = uri;\n  this.data = data;\n\n  if (typeof options == 'function') {\n    this.callback = options;\n    this.options = {};\n  } else {\n    this.callback = callback;\n    this.options = options;\n  }\n}\n\nNeedle.prototype.setup = function (uri, options) {\n  function get_option(key, fallback) {\n    // if original is in options, return that value\n    if (typeof options[key] != 'undefined') return options[key]; // otherwise, return value from alias or fallback/undefined\n\n    return typeof options[aliased.inverted[key]] != 'undefined' ? options[aliased.inverted[key]] : fallback;\n  }\n\n  function check_value(expected, key) {\n    var value = get_option(key),\n        type = typeof value;\n    if (type != 'undefined' && type != expected) throw new TypeError(type + ' received for ' + key + ', but expected a ' + expected);\n    return type == expected ? value : defaults[key];\n  } //////////////////////////////////////////////////\n  // the basics\n\n\n  var config = {\n    http_opts: {\n      localAddress: get_option('localAddress', undefined),\n      lookup: get_option('lookup', undefined)\n    },\n    // passed later to http.request() directly\n    headers: {},\n    output: options.output,\n    proxy: get_option('proxy', defaults.proxy),\n    parser: get_option('parse_response', defaults.parse_response),\n    encoding: options.encoding || (options.multipart ? 'binary' : defaults.encoding)\n  };\n  keys_by_type(Boolean).forEach(function (key) {\n    config[key] = check_value('boolean', key);\n  });\n  keys_by_type(Number).forEach(function (key) {\n    config[key] = check_value('number', key);\n  }); // populate http_opts with given TLS options\n\n  tls_options.split(' ').forEach(function (key) {\n    if (typeof options[key] != 'undefined') {\n      config.http_opts[key] = options[key];\n      if (typeof options.agent == 'undefined') config.http_opts.agent = false; // otherwise tls options are skipped\n    }\n  }); //////////////////////////////////////////////////\n  // headers, cookies\n\n  for (var key in defaults.headers) config.headers[key] = defaults.headers[key];\n\n  config.headers['accept'] = options.accept || defaults.accept;\n  config.headers['user-agent'] = options.user_agent || defaults.user_agent;\n  if (options.content_type) config.headers['content-type'] = options.content_type; // set connection header if opts.connection was passed, or if node < 0.11.4 (close)\n\n  if (options.connection || close_by_default) config.headers['connection'] = options.connection || 'close';\n  if ((options.compressed || defaults.compressed) && typeof zlib != 'undefined') config.headers['accept-encoding'] = decompressors['br'] ? 'gzip, deflate, br' : 'gzip, deflate';\n  if (options.cookies) config.headers['cookie'] = cookies.write(options.cookies); //////////////////////////////////////////////////\n  // basic/digest auth\n\n  if (uri.match(/[^\\/]@/)) {\n    // url contains user:pass@host, so parse it.\n    var parts = (url.parse(uri).auth || '').split(':');\n    options.username = parts[0];\n    options.password = parts[1];\n  }\n\n  if (options.username) {\n    if (options.auth && (options.auth == 'auto' || options.auth == 'digest')) {\n      config.credentials = [options.username, options.password];\n    } else {\n      config.headers['authorization'] = auth.basic(options.username, options.password);\n    }\n  } // if proxy is present, set auth header from either url or proxy_user option.\n\n\n  if (config.proxy) {\n    if (config.proxy.indexOf('http') === -1) config.proxy = 'http://' + config.proxy;\n\n    if (config.proxy.indexOf('@') !== -1) {\n      var proxy = (url.parse(config.proxy).auth || '').split(':');\n      options.proxy_user = proxy[0];\n      options.proxy_pass = proxy[1];\n    }\n\n    if (options.proxy_user) config.headers['proxy-authorization'] = auth.basic(options.proxy_user, options.proxy_pass);\n  } // now that all our headers are set, overwrite them if instructed.\n\n\n  for (var h in options.headers) config.headers[h.toLowerCase()] = options.headers[h];\n\n  config.uri_modifier = get_option('uri_modifier', null);\n  return config;\n};\n\nNeedle.prototype.start = function () {\n  var out = new stream.PassThrough({\n    objectMode: false\n  }),\n      uri = this.uri,\n      data = this.data,\n      method = this.method,\n      callback = typeof this.options == 'function' ? this.options : this.callback,\n      options = this.options || {}; // if no 'http' is found on URL, prepend it.\n\n  if (uri.indexOf('http') === -1) uri = uri.replace(/^(\\/\\/)?/, 'http://');\n  var self = this,\n      body,\n      waiting = false,\n      config = this.setup(uri, options); // unless options.json was set to false, assume boss also wants JSON if content-type matches.\n\n  var json = options.json || options.json !== false && config.headers['content-type'] == 'application/json';\n\n  if (data) {\n    if (options.multipart) {\n      // boss says we do multipart. so we do it.\n      var boundary = options.boundary || defaults.boundary;\n      waiting = true;\n      multipart.build(data, boundary, function (err, parts) {\n        if (err) throw err;\n        config.headers['content-type'] = 'multipart/form-data; boundary=' + boundary;\n        next(parts);\n      });\n    } else if (is_stream(data)) {\n      if (method == 'get') throw new Error('Refusing to pipe() a stream via GET. Did you mean .post?');\n\n      if (config.stream_length > 0 || config.stream_length === 0 && data.path) {\n        // ok, let's get the stream's length and set it as the content-length header.\n        // this prevents some servers from cutting us off before all the data is sent.\n        waiting = true;\n        get_stream_length(data, config.stream_length, function (length) {\n          data.length = length;\n          next(data);\n        });\n      } else {\n        // if the boss doesn't want us to get the stream's length, or if it doesn't\n        // have a file descriptor for that purpose, then just head on.\n        body = data;\n      }\n    } else if (Buffer.isBuffer(data)) {\n      body = data; // use the raw buffer as request body.\n    } else if (method == 'get' && !json) {\n      // append the data to the URI as a querystring.\n      uri = uri.replace(/\\?.*|$/, '?' + stringify(data));\n    } else {\n      // string or object data, no multipart.\n      // if string, leave it as it is, otherwise, stringify.\n      body = typeof data === 'string' ? data : json ? JSON.stringify(data) : stringify(data); // ensure we have a buffer so bytecount is correct.\n\n      body = Buffer.from(body, config.encoding);\n    }\n  }\n\n  function next(body) {\n    if (body) {\n      if (body.length) config.headers['content-length'] = body.length; // if no content-type was passed, determine if json or not.\n\n      if (!config.headers['content-type']) {\n        config.headers['content-type'] = json ? 'application/json; charset=utf-8' : 'application/x-www-form-urlencoded'; // no charset says W3 spec.\n      }\n    } // unless a specific accept header was set, assume json: true wants JSON back.\n\n\n    if (options.json && !options.accept && !(options.headers || {}).accept) config.headers['accept'] = 'application/json';\n    self.send_request(1, method, uri, config, body, out, callback);\n  }\n\n  if (!waiting) next(body);\n  return out;\n};\n\nNeedle.prototype.get_request_opts = function (method, uri, config) {\n  var opts = config.http_opts,\n      proxy = config.proxy,\n      remote = proxy ? url.parse(proxy) : url.parse(uri);\n  opts.protocol = remote.protocol;\n  opts.host = remote.hostname;\n  opts.port = remote.port || (remote.protocol == 'https:' ? 443 : 80);\n  opts.path = proxy ? uri : remote.pathname + (remote.search || '');\n  opts.method = method;\n  opts.headers = config.headers;\n\n  if (!opts.headers['host']) {\n    // if using proxy, make sure the host header shows the final destination\n    var target = proxy ? url.parse(uri) : remote;\n    opts.headers['host'] = target.hostname; // and if a non standard port was passed, append it to the port header\n\n    if (target.port && [80, 443].indexOf(target.port) === -1) {\n      opts.headers['host'] += ':' + target.port;\n    }\n  }\n\n  return opts;\n};\n\nNeedle.prototype.should_follow = function (location, config, original) {\n  if (!location) return false; // returns true if location contains matching property (host or protocol)\n\n  function matches(property) {\n    var property = original[property];\n    return location.indexOf(property) !== -1;\n  } // first, check whether the requested location is actually different from the original\n\n\n  if (!config.follow_if_same_location && location === original) return false;\n  if (config.follow_if_same_host && !matches('host')) return false; // host does not match, so not following\n\n  if (config.follow_if_same_protocol && !matches('protocol')) return false; // procotol does not match, so not following\n\n  return true;\n};\n\nNeedle.prototype.send_request = function (count, method, uri, config, post_data, out, callback) {\n  if (typeof config.uri_modifier === 'function') {\n    var modified_uri = config.uri_modifier(uri);\n    debug('Modifying request URI', uri + ' => ' + modified_uri);\n    uri = modified_uri;\n  }\n\n  var request,\n      timer,\n      returned = 0,\n      self = this,\n      request_opts = this.get_request_opts(method, uri, config),\n      protocol = request_opts.protocol == 'https:' ? https : http;\n\n  function done(err, resp) {\n    if (returned++ > 0) return debug('Already finished, stopping here.');\n    if (timer) clearTimeout(timer);\n    request.removeListener('error', had_error);\n    out.done = true;\n    if (callback) return callback(err, resp, resp ? resp.body : undefined); // NOTE: this event used to be called 'end', but the behaviour was confusing\n    // when errors ocurred, because the stream would still emit an 'end' event.\n\n    out.emit('done', err); // trigger the 'done' event on streams we're being piped to, if any\n\n    var pipes = out._readableState.pipes || [];\n    if (!pipes.forEach) pipes = [pipes];\n    pipes.forEach(function (st) {\n      st.emit('done', err);\n    });\n  }\n\n  function had_error(err) {\n    debug('Request error', err);\n    out.emit('err', err);\n    done(err || new Error('Unknown error when making request.'));\n  }\n\n  function set_timeout(type, milisecs) {\n    if (timer) clearTimeout(timer);\n    if (milisecs <= 0) return;\n    timer = setTimeout(function () {\n      out.emit('timeout', type);\n      request.abort(); // also invoke done() to terminate job on read_timeout\n\n      if (type == 'read') done(new Error(type + ' timeout'));\n    }, milisecs);\n  } // handle errors on the underlying socket, that may be closed while writing\n  // for an example case, see test/long_string_spec.js. we make sure this\n  // scenario ocurred by verifying the socket's writable & destroyed states.\n\n\n  function on_socket_end() {\n    if (returned && !this.writable && this.destroyed === false) {\n      this.destroy();\n      had_error(new Error('Remote end closed socket abruptly.'));\n    }\n  }\n\n  debug('Making request #' + count, request_opts);\n  request = protocol.request(request_opts, function (resp) {\n    var headers = resp.headers;\n    debug('Got response', resp.statusCode, headers);\n    out.emit('response', resp);\n    set_timeout('read', config.read_timeout); // if we got cookies, parse them unless we were instructed not to. make sure to include any\n    // cookies that might have been set on previous redirects.\n\n    if (config.parse_cookies && (headers['set-cookie'] || config.previous_resp_cookies)) {\n      resp.cookies = extend(config.previous_resp_cookies || {}, cookies.read(headers['set-cookie']));\n      debug('Got cookies', resp.cookies);\n    } // if redirect code is found, determine if we should follow it according to the given options.\n\n\n    if (redirect_codes.indexOf(resp.statusCode) !== -1 && self.should_follow(headers.location, config, uri)) {\n      // clear timer before following redirects to prevent unexpected setTimeout consequence\n      clearTimeout(timer);\n\n      if (count <= config.follow_max) {\n        out.emit('redirect', headers.location); // unless 'follow_keep_method' is true, rewrite the request to GET before continuing.\n\n        if (!config.follow_keep_method) {\n          method = 'GET';\n          post_data = null;\n          delete config.headers['content-length']; // in case the original was a multipart POST request.\n        } // if follow_set_cookies is true, insert cookies in the next request's headers.\n        // we set both the original request cookies plus any response cookies we might have received.\n\n\n        if (config.follow_set_cookies) {\n          var request_cookies = cookies.read(config.headers['cookie']);\n          config.previous_resp_cookies = resp.cookies;\n\n          if (Object.keys(request_cookies).length || Object.keys(resp.cookies || {}).length) {\n            config.headers['cookie'] = cookies.write(extend(request_cookies, resp.cookies));\n          }\n        } else if (config.headers['cookie']) {\n          debug('Clearing original request cookie', config.headers['cookie']);\n          delete config.headers['cookie'];\n        }\n\n        if (config.follow_set_referer) config.headers['referer'] = encodeURI(uri); // the original, not the destination URL.\n\n        config.headers['host'] = null; // clear previous Host header to avoid conflicts.\n\n        var redirect_url = resolve_url(headers.location, uri);\n        debug('Redirecting to ' + redirect_url.toString());\n        return self.send_request(++count, method, redirect_url.toString(), config, post_data, out, callback);\n      } else if (config.follow_max > 0) {\n        return done(new Error('Max redirects reached. Possible loop in: ' + headers.location));\n      }\n    } // if auth is requested and credentials were not passed, resend request, provided we have user/pass.\n\n\n    if (resp.statusCode == 401 && headers['www-authenticate'] && config.credentials) {\n      if (!config.headers['authorization']) {\n        // only if authentication hasn't been sent\n        var auth_header = auth.header(headers['www-authenticate'], config.credentials, request_opts);\n\n        if (auth_header) {\n          config.headers['authorization'] = auth_header;\n          return self.send_request(count, method, uri, config, post_data, out, callback);\n        }\n      }\n    } // ok, so we got a valid (non-redirect & authorized) response. let's notify the stream guys.\n\n\n    out.emit('header', resp.statusCode, headers);\n    out.emit('headers', headers);\n    var pipeline = [],\n        mime = parse_content_type(headers['content-type']),\n        text_response = mime.type && (mime.type.indexOf('text/') != -1 || !!mime.type.match(/(\\/|\\+)(xml|json)$/)); // To start, if our body is compressed and we're able to inflate it, do it.\n\n    if (headers['content-encoding'] && decompressors[headers['content-encoding']]) {\n      var decompressor = decompressors[headers['content-encoding']](); // make sure we catch errors triggered by the decompressor.\n\n      decompressor.on('error', had_error);\n      pipeline.push(decompressor);\n    } // If parse is enabled and we have a parser for it, then go for it.\n\n\n    if (config.parser && parsers[mime.type]) {\n      // If a specific parser was requested, make sure we don't parse other types.\n      var parser_name = config.parser.toString().toLowerCase();\n\n      if (['xml', 'json'].indexOf(parser_name) == -1 || parsers[mime.type].name == parser_name) {\n        // OK, so either we're parsing all content types or the one requested matches.\n        out.parser = parsers[mime.type].name;\n        pipeline.push(parsers[mime.type].fn()); // Set objectMode on out stream to improve performance.\n\n        out._writableState.objectMode = true;\n        out._readableState.objectMode = true;\n      } // If we're not parsing, and unless decoding was disabled, we'll try\n      // decoding non UTF-8 bodies to UTF-8, using the iconv-lite library.\n\n    } else if (text_response && config.decode_response && mime.charset) {\n      pipeline.push(decoder(mime.charset));\n    } // And `out` is the stream we finally push the decoded/parsed output to.\n\n\n    pipeline.push(out); // Now, release the kraken!\n\n    pump_streams([resp].concat(pipeline), function (err) {\n      if (err) debug(err); // on node v8.x, if an error ocurrs on the receiving end,\n      // then we want to abort the request to avoid having dangling sockets\n\n      if (err && err.message == 'write after end') request.destroy();\n    }); // If the user has requested and output file, pipe the output stream to it.\n    // In stream mode, we will still get the response stream to play with.\n\n    if (config.output && resp.statusCode == 200) {\n      // for some reason, simply piping resp to the writable stream doesn't\n      // work all the time (stream gets cut in the middle with no warning).\n      // so we'll manually need to do the readable/write(chunk) trick.\n      var file = fs.createWriteStream(config.output);\n      file.on('error', had_error);\n      out.on('end', function () {\n        if (file.writable) file.end();\n      });\n      file.on('close', function () {\n        delete out.file;\n      });\n      out.on('readable', function () {\n        var chunk;\n\n        while ((chunk = this.read()) !== null) {\n          if (file.writable) file.write(chunk); // if callback was requested, also push it to resp.body\n\n          if (resp.body) resp.body.push(chunk);\n        }\n      });\n      out.file = file;\n    } // Only aggregate the full body if a callback was requested.\n\n\n    if (callback) {\n      resp.raw = [];\n      resp.body = [];\n      resp.bytes = 0; // Gather and count the amount of (raw) bytes using a PassThrough stream.\n\n      var clean_pipe = new stream.PassThrough();\n      clean_pipe.on('readable', function () {\n        var chunk;\n\n        while ((chunk = this.read()) != null) {\n          resp.bytes += chunk.length;\n          resp.raw.push(chunk);\n        }\n      });\n      pump_streams([resp, clean_pipe], function (err) {\n        if (err) debug(err);\n      }); // Listen on the 'readable' event to aggregate the chunks, but only if\n      // file output wasn't requested. Otherwise we'd have two stream readers.\n\n      if (!config.output || resp.statusCode != 200) {\n        out.on('readable', function () {\n          var chunk;\n\n          while ((chunk = this.read()) !== null) {\n            // We're either pushing buffers or objects, never strings.\n            if (typeof chunk == 'string') chunk = Buffer.from(chunk); // Push all chunks to resp.body. We'll bind them in resp.end().\n\n            resp.body.push(chunk);\n          }\n        });\n      }\n    } // And set the .body property once all data is in.\n\n\n    out.on('end', function () {\n      if (resp.body) {\n        // callback mode\n        // we want to be able to access to the raw data later, so keep a reference.\n        resp.raw = Buffer.concat(resp.raw); // if parse was successful, we should have an array with one object\n\n        if (resp.body[0] !== undefined && !Buffer.isBuffer(resp.body[0])) {\n          // that's our body right there.\n          resp.body = resp.body[0]; // set the parser property on our response. we may want to check.\n\n          if (out.parser) resp.parser = out.parser;\n        } else {\n          // we got one or several buffers. string or binary.\n          resp.body = Buffer.concat(resp.body); // if we're here and parsed is true, it means we tried to but it didn't work.\n          // so given that we got a text response, let's stringify it.\n\n          if (text_response || out.parser) {\n            resp.body = resp.body.toString();\n          }\n        }\n      } // if an output file is being written to, make sure the callback\n      // is triggered after all data has been written to it.\n\n\n      if (out.file) {\n        out.file.on('close', function () {\n          done(null, resp);\n        });\n      } else {\n        // elvis has left the building.\n        done(null, resp);\n      }\n    }); // out.on('error', function(err) {\n    //   had_error(err);\n    //   if (err.code == 'ERR_STREAM_DESTROYED' || err.code == 'ERR_STREAM_PREMATURE_CLOSE') {\n    //     request.abort();\n    //   }\n    // })\n  }); // end request call\n  // unless open_timeout was disabled, set a timeout to abort the request.\n\n  set_timeout('open', config.open_timeout); // handle errors on the request object. things might get bumpy.\n\n  request.on('error', had_error); // make sure timer is cleared if request is aborted (issue #257)\n\n  request.once('abort', function () {\n    if (timer) clearTimeout(timer);\n  }); // handle socket 'end' event to ensure we don't get delayed EPIPE errors.\n\n  request.once('socket', function (socket) {\n    if (socket.connecting) {\n      socket.once('connect', function () {\n        set_timeout('response', config.response_timeout);\n      });\n    } else {\n      set_timeout('response', config.response_timeout);\n    } // socket.once('close', function(e) {\n    //   console.log('socket closed!', e);\n    // })\n\n\n    if (!socket.on_socket_end) {\n      socket.on_socket_end = on_socket_end;\n      socket.once('end', function () {\n        process.nextTick(on_socket_end.bind(socket));\n      });\n    }\n  });\n\n  if (post_data) {\n    if (is_stream(post_data)) {\n      pump_streams([post_data, request], function (err) {\n        if (err) debug(err);\n      });\n    } else {\n      request.write(post_data, config.encoding);\n      request.end();\n    }\n  } else {\n    request.end();\n  }\n\n  out.abort = function () {\n    request.abort();\n  }; // easier access\n\n\n  out.request = request;\n  return out;\n}; //////////////////////////////////////////\n// exports\n\n\nif (typeof Promise !== 'undefined') {\n  module.exports = function () {\n    var verb,\n        args = [].slice.call(arguments);\n    if (args[0].match(/\\.|\\//)) // first argument looks like a URL\n      verb = args.length > 2 ? 'post' : 'get';else verb = args.shift();\n    if (verb.match(/get|head/i) && args.length == 2) args.splice(1, 0, null); // assume no data if head/get with two args (url, options)\n\n    return new Promise(function (resolve, reject) {\n      module.exports.request(verb, args[0], args[1], args[2], function (err, resp) {\n        return err ? reject(err) : resolve(resp);\n      });\n    });\n  };\n}\n\nmodule.exports.version = version;\n\nmodule.exports.defaults = function (obj) {\n  for (var key in obj) {\n    var target_key = aliased.options[key] || key;\n\n    if (defaults.hasOwnProperty(target_key) && typeof obj[key] != 'undefined') {\n      if (target_key != 'parse_response' && target_key != 'proxy') {\n        // ensure type matches the original, except for proxy/parse_response that can be null/bool or string\n        var valid_type = defaults[target_key].constructor.name;\n        if (obj[key].constructor.name != valid_type) throw new TypeError('Invalid type for ' + key + ', should be ' + valid_type);\n      }\n\n      defaults[target_key] = obj[key];\n    } else {\n      throw new Error('Invalid property for defaults:' + target_key);\n    }\n  }\n\n  return defaults;\n};\n\n'head get'.split(' ').forEach(function (method) {\n  module.exports[method] = function (uri, options, callback) {\n    return new Needle(method, uri, null, options, callback).start();\n  };\n});\n'post put patch delete'.split(' ').forEach(function (method) {\n  module.exports[method] = function (uri, data, options, callback) {\n    return new Needle(method, uri, data, options, callback).start();\n  };\n});\n\nmodule.exports.request = function (method, uri, data, opts, callback) {\n  return new Needle(method, uri, data, opts, callback).start();\n};","map":{"version":3,"sources":["/Users/samilvaliahmetov/education/programming/schoolProject/my-app/node_modules/needle/lib/needle.js"],"names":["fs","require","http","https","url","stream","debug","stringify","build","multipart","auth","cookies","parsers","decoder","version","user_agent","process","platform","arch","tls_options","close_by_default","Agent","defaultMaxSockets","Infinity","extend","Object","assign","_extend","redirect_codes","bind_opts","fn","options","bind","decompressors","zlib","zlib_options","flush","Z_SYNC_FLUSH","finishFlush","br_options","BROTLI_OPERATION_FLUSH","Inflate","Gunzip","BrotliDecompress","e","defaults","boundary","encoding","parse_response","proxy","headers","accept","open_timeout","response_timeout","read_timeout","follow_max","stream_length","compressed","decode_response","parse_cookies","follow_set_cookies","follow_set_referer","follow_keep_method","follow_if_same_host","follow_if_same_protocol","follow_if_same_location","aliased","decode","parse","timeout","follow","inverted","keys","map","k","value","keys_by_type","type","el","constructor","filter","parse_content_type","header","found","charset","arr","split","length","match","is_stream","obj","pipe","get_stream_length","given_length","cb","end","start","stat","path","err","size","resolve_url","href","base","URL","resolve","pump_streams","streams","pipeline","apply","concat","tmp","shift","once","Needle","method","uri","data","callback","TypeError","toLowerCase","prototype","setup","get_option","key","fallback","check_value","expected","config","http_opts","localAddress","undefined","lookup","output","parser","Boolean","forEach","Number","agent","content_type","connection","write","parts","username","password","credentials","basic","indexOf","proxy_user","proxy_pass","h","uri_modifier","out","PassThrough","objectMode","replace","self","body","waiting","json","next","Error","Buffer","isBuffer","JSON","from","send_request","get_request_opts","opts","remote","protocol","host","hostname","port","pathname","search","target","should_follow","location","original","matches","property","count","post_data","modified_uri","request","timer","returned","request_opts","done","resp","clearTimeout","removeListener","had_error","emit","pipes","_readableState","st","set_timeout","milisecs","setTimeout","abort","on_socket_end","writable","destroyed","destroy","statusCode","previous_resp_cookies","read","request_cookies","encodeURI","redirect_url","toString","auth_header","mime","text_response","decompressor","on","push","parser_name","name","_writableState","message","file","createWriteStream","chunk","raw","bytes","clean_pipe","socket","connecting","nextTick","Promise","module","exports","verb","args","slice","call","arguments","splice","reject","target_key","hasOwnProperty","valid_type"],"mappings":"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","sourcesContent":["//////////////////////////////////////////\n// Needle -- HTTP Client for Node.js\n// Written by Tom√°s Pollak <tomas@forkhq.com>\n// (c) 2012-2020 - Fork Ltd.\n// MIT Licensed\n//////////////////////////////////////////\n\nvar fs          = require('fs'),\n    http        = require('http'),\n    https       = require('https'),\n    url         = require('url'),\n    stream      = require('stream'),\n    debug       = require('debug')('needle'),\n    stringify   = require('./querystring').build,\n    multipart   = require('./multipart'),\n    auth        = require('./auth'),\n    cookies     = require('./cookies'),\n    parsers     = require('./parsers'),\n    decoder     = require('./decoder');\n\n//////////////////////////////////////////\n// variabilia\n\nvar version     = require('../package.json').version;\n\nvar user_agent  = 'Needle/' + version;\nuser_agent     += ' (Node.js ' + process.version + '; ' + process.platform + ' ' + process.arch + ')';\n\nvar tls_options = 'agent pfx key passphrase cert ca ciphers rejectUnauthorized secureProtocol checkServerIdentity family';\n\n// older versions of node (< 0.11.4) prevent the runtime from exiting\n// because of connections in keep-alive state. so if this is the case\n// we'll default new requests to set a Connection: close header.\nvar close_by_default = !http.Agent || http.Agent.defaultMaxSockets != Infinity;\n\n// see if we have Object.assign. otherwise fall back to util._extend\nvar extend = Object.assign ? Object.assign : require('util')._extend;\n\n// these are the status codes that Needle interprets as redirects.\nvar redirect_codes = [301, 302, 303, 307, 308];\n\n//////////////////////////////////////////\n// decompressors for gzip/deflate/br bodies\n\nfunction bind_opts(fn, options) {\n  return fn.bind(null, options);\n}\n\nvar decompressors = {};\n\ntry {\n\n  var zlib = require('zlib');\n\n  // Enable Z_SYNC_FLUSH to avoid Z_BUF_ERROR errors (Node PR #2595)\n  var zlib_options = {\n    flush: zlib.Z_SYNC_FLUSH,\n    finishFlush: zlib.Z_SYNC_FLUSH\n  };\n\n  var br_options = {\n    flush: zlib.BROTLI_OPERATION_FLUSH,\n    finishFlush: zlib.BROTLI_OPERATION_FLUSH\n  };\n\n  decompressors['x-deflate'] = bind_opts(zlib.Inflate, zlib_options);\n  decompressors['deflate']   = bind_opts(zlib.Inflate, zlib_options);\n  decompressors['x-gzip']    = bind_opts(zlib.Gunzip, zlib_options);\n  decompressors['gzip']      = bind_opts(zlib.Gunzip, zlib_options);\n  if (typeof zlib.BrotliDecompress === 'function') {\n    decompressors['br']      = bind_opts(zlib.BrotliDecompress, br_options);\n  }\n\n} catch(e) { /* zlib not available */ }\n\n//////////////////////////////////////////\n// options and aliases\n\nvar defaults = {\n  // data\n  boundary                : '--------------------NODENEEDLEHTTPCLIENT',\n  encoding                : 'utf8',\n  parse_response          : 'all', // same as true. valid options: 'json', 'xml' or false/null\n  proxy                   : null,\n\n  // headers\n  headers                 : {},\n  accept                  : '*/*',\n  user_agent              : user_agent,\n\n  // numbers\n  open_timeout            : 10000,\n  response_timeout        : 0,\n  read_timeout            : 0,\n  follow_max              : 0,\n  stream_length           : -1,\n\n  // booleans\n  compressed              : false,\n  decode_response         : true,\n  parse_cookies           : true,\n  follow_set_cookies      : false,\n  follow_set_referer      : false,\n  follow_keep_method      : false,\n  follow_if_same_host     : false,\n  follow_if_same_protocol : false,\n  follow_if_same_location : false\n}\n\nvar aliased = {\n  options: {\n    decode  : 'decode_response',\n    parse   : 'parse_response',\n    timeout : 'open_timeout',\n    follow  : 'follow_max'\n  },\n  inverted: {}\n}\n\n// only once, invert aliased keys so we can get passed options.\nObject.keys(aliased.options).map(function(k) {\n  var value = aliased.options[k];\n  aliased.inverted[value] = k;\n});\n\n//////////////////////////////////////////\n// helpers\n\nfunction keys_by_type(type) {\n  return Object.keys(defaults).map(function(el) {\n    if (defaults[el] !== null && defaults[el].constructor == type)\n      return el;\n  }).filter(function(el) { return el })\n}\n\nfunction parse_content_type(header) {\n  if (!header || header === '') return {};\n\n  var found, charset = 'utf8', arr = header.split(';');\n\n  if (arr.length > 1 && (found = arr[1].match(/charset=(.+)/)))\n    charset = found[1];\n\n  return { type: arr[0], charset: charset };\n}\n\nfunction is_stream(obj) {\n  return typeof obj.pipe === 'function';\n}\n\nfunction get_stream_length(stream, given_length, cb) {\n  if (given_length > 0)\n    return cb(given_length);\n\n  if (stream.end !== void 0 && stream.end !== Infinity && stream.start !== void 0)\n    return cb((stream.end + 1) - (stream.start || 0));\n\n  fs.stat(stream.path, function(err, stat) {\n    cb(stat ? stat.size - (stream.start || 0) : null);\n  });\n}\n\nfunction resolve_url(href, base) {\n  if (url.URL)\n    return new url.URL(href, base);\n\n  // older Node version (< v6.13)\n  return url.resolve(base, href);\n}\n\nfunction pump_streams(streams, cb) {\n  if (stream.pipeline)\n    return stream.pipeline.apply(null, streams.concat(cb));\n\n  var tmp = streams.shift();\n  while (streams.length) {\n    tmp = tmp.pipe(streams.shift());\n    tmp.once('error', function(e) {\n      cb && cb(e);\n      cb = null;\n    })\n  }\n}\n\n//////////////////////////////////////////\n// the main act\n\nfunction Needle(method, uri, data, options, callback) {\n  // if (!(this instanceof Needle)) {\n  //   return new Needle(method, uri, data, options, callback);\n  // }\n\n  if (typeof uri !== 'string')\n    throw new TypeError('URL must be a string, not ' + uri);\n\n  this.method   = method.toLowerCase();\n  this.uri      = uri;\n  this.data     = data;\n\n  if (typeof options == 'function') {\n    this.callback = options;\n    this.options  = {};\n  } else {\n    this.callback = callback;\n    this.options  = options;\n  }\n\n}\n\nNeedle.prototype.setup = function(uri, options) {\n\n  function get_option(key, fallback) {\n    // if original is in options, return that value\n    if (typeof options[key] != 'undefined') return options[key];\n\n    // otherwise, return value from alias or fallback/undefined\n    return typeof options[aliased.inverted[key]] != 'undefined'\n                ? options[aliased.inverted[key]] : fallback;\n  }\n\n  function check_value(expected, key) {\n    var value = get_option(key),\n        type  = typeof value;\n\n    if (type != 'undefined' && type != expected)\n      throw new TypeError(type + ' received for ' + key + ', but expected a ' + expected);\n\n    return (type == expected) ? value : defaults[key];\n  }\n\n  //////////////////////////////////////////////////\n  // the basics\n\n  var config = {\n    http_opts : {\n      localAddress: get_option('localAddress', undefined),\n      lookup: get_option('lookup', undefined)\n    }, // passed later to http.request() directly\n    headers   : {},\n    output    : options.output,\n    proxy     : get_option('proxy', defaults.proxy),\n    parser    : get_option('parse_response', defaults.parse_response),\n    encoding  : options.encoding || (options.multipart ? 'binary' : defaults.encoding)\n  }\n\n  keys_by_type(Boolean).forEach(function(key) {\n    config[key] = check_value('boolean', key);\n  })\n\n  keys_by_type(Number).forEach(function(key) {\n    config[key] = check_value('number', key);\n  })\n\n  // populate http_opts with given TLS options\n  tls_options.split(' ').forEach(function(key) {\n    if (typeof options[key] != 'undefined') {\n      config.http_opts[key] = options[key];\n      if (typeof options.agent == 'undefined')\n        config.http_opts.agent = false; // otherwise tls options are skipped\n    }\n  });\n\n  //////////////////////////////////////////////////\n  // headers, cookies\n\n  for (var key in defaults.headers)\n    config.headers[key] = defaults.headers[key];\n\n  config.headers['accept'] = options.accept || defaults.accept;\n  config.headers['user-agent'] = options.user_agent || defaults.user_agent;\n\n  if (options.content_type)\n    config.headers['content-type'] = options.content_type;\n\n  // set connection header if opts.connection was passed, or if node < 0.11.4 (close)\n  if (options.connection || close_by_default)\n    config.headers['connection'] = options.connection || 'close';\n\n  if ((options.compressed || defaults.compressed) && typeof zlib != 'undefined')\n    config.headers['accept-encoding'] = decompressors['br'] ? 'gzip, deflate, br' : 'gzip, deflate';\n\n  if (options.cookies)\n    config.headers['cookie'] = cookies.write(options.cookies);\n\n  //////////////////////////////////////////////////\n  // basic/digest auth\n\n  if (uri.match(/[^\\/]@/)) { // url contains user:pass@host, so parse it.\n    var parts = (url.parse(uri).auth || '').split(':');\n    options.username = parts[0];\n    options.password = parts[1];\n  }\n\n  if (options.username) {\n    if (options.auth && (options.auth == 'auto' || options.auth == 'digest')) {\n      config.credentials = [options.username, options.password];\n    } else {\n      config.headers['authorization'] = auth.basic(options.username, options.password);\n    }\n  }\n\n  // if proxy is present, set auth header from either url or proxy_user option.\n  if (config.proxy) {\n    if (config.proxy.indexOf('http') === -1)\n      config.proxy = 'http://' + config.proxy;\n\n    if (config.proxy.indexOf('@') !== -1) {\n      var proxy = (url.parse(config.proxy).auth || '').split(':');\n      options.proxy_user = proxy[0];\n      options.proxy_pass = proxy[1];\n    }\n\n    if (options.proxy_user)\n      config.headers['proxy-authorization'] = auth.basic(options.proxy_user, options.proxy_pass);\n  }\n\n  // now that all our headers are set, overwrite them if instructed.\n  for (var h in options.headers)\n    config.headers[h.toLowerCase()] = options.headers[h];\n\n  config.uri_modifier = get_option('uri_modifier', null);\n\n  return config;\n}\n\nNeedle.prototype.start = function() {\n\n  var out      = new stream.PassThrough({ objectMode: false }),\n      uri      = this.uri,\n      data     = this.data,\n      method   = this.method,\n      callback = (typeof this.options == 'function') ? this.options : this.callback,\n      options  = this.options || {};\n\n  // if no 'http' is found on URL, prepend it.\n  if (uri.indexOf('http') === -1)\n    uri = uri.replace(/^(\\/\\/)?/, 'http://');\n\n  var self = this, body, waiting = false, config = this.setup(uri, options);\n\n  // unless options.json was set to false, assume boss also wants JSON if content-type matches.\n  var json = options.json || (options.json !== false && config.headers['content-type'] == 'application/json');\n\n  if (data) {\n\n    if (options.multipart) { // boss says we do multipart. so we do it.\n      var boundary = options.boundary || defaults.boundary;\n\n      waiting = true;\n      multipart.build(data, boundary, function(err, parts) {\n        if (err) throw(err);\n\n        config.headers['content-type'] = 'multipart/form-data; boundary=' + boundary;\n        next(parts);\n      });\n\n    } else if (is_stream(data)) {\n\n      if (method == 'get')\n        throw new Error('Refusing to pipe() a stream via GET. Did you mean .post?');\n\n      if (config.stream_length > 0 || (config.stream_length === 0 && data.path)) {\n        // ok, let's get the stream's length and set it as the content-length header.\n        // this prevents some servers from cutting us off before all the data is sent.\n        waiting = true;\n        get_stream_length(data, config.stream_length, function(length) {\n          data.length = length;\n          next(data);\n        })\n\n      } else {\n        // if the boss doesn't want us to get the stream's length, or if it doesn't\n        // have a file descriptor for that purpose, then just head on.\n        body = data;\n      }\n\n    } else if (Buffer.isBuffer(data)) {\n\n      body = data; // use the raw buffer as request body.\n\n    } else if (method == 'get' && !json) {\n\n      // append the data to the URI as a querystring.\n      uri = uri.replace(/\\?.*|$/, '?' + stringify(data));\n\n    } else { // string or object data, no multipart.\n\n      // if string, leave it as it is, otherwise, stringify.\n      body = (typeof(data) === 'string') ? data\n             : json ? JSON.stringify(data) : stringify(data);\n\n      // ensure we have a buffer so bytecount is correct.\n      body = Buffer.from(body, config.encoding);\n    }\n\n  }\n\n  function next(body) {\n    if (body) {\n      if (body.length) config.headers['content-length'] = body.length;\n\n      // if no content-type was passed, determine if json or not.\n      if (!config.headers['content-type']) {\n        config.headers['content-type'] = json\n        ? 'application/json; charset=utf-8'\n        : 'application/x-www-form-urlencoded'; // no charset says W3 spec.\n      }\n    }\n\n    // unless a specific accept header was set, assume json: true wants JSON back.\n    if (options.json && (!options.accept && !(options.headers || {}).accept))\n      config.headers['accept'] = 'application/json';\n\n    self.send_request(1, method, uri, config, body, out, callback);\n  }\n\n  if (!waiting) next(body);\n  return out;\n}\n\nNeedle.prototype.get_request_opts = function(method, uri, config) {\n  var opts      = config.http_opts,\n      proxy     = config.proxy,\n      remote    = proxy ? url.parse(proxy) : url.parse(uri);\n\n  opts.protocol = remote.protocol;\n  opts.host     = remote.hostname;\n  opts.port     = remote.port || (remote.protocol == 'https:' ? 443 : 80);\n  opts.path     = proxy ? uri : remote.pathname + (remote.search || '');\n  opts.method   = method;\n  opts.headers  = config.headers;\n\n  if (!opts.headers['host']) {\n    // if using proxy, make sure the host header shows the final destination\n    var target = proxy ? url.parse(uri) : remote;\n    opts.headers['host'] = target.hostname;\n\n    // and if a non standard port was passed, append it to the port header\n    if (target.port && [80, 443].indexOf(target.port) === -1) {\n      opts.headers['host'] += ':' + target.port;\n    }\n  }\n\n  return opts;\n}\n\nNeedle.prototype.should_follow = function(location, config, original) {\n  if (!location) return false;\n\n  // returns true if location contains matching property (host or protocol)\n  function matches(property) {\n    var property = original[property];\n    return location.indexOf(property) !== -1;\n  }\n\n  // first, check whether the requested location is actually different from the original\n  if (!config.follow_if_same_location && location === original)\n    return false;\n\n  if (config.follow_if_same_host && !matches('host'))\n    return false; // host does not match, so not following\n\n  if (config.follow_if_same_protocol && !matches('protocol'))\n    return false; // procotol does not match, so not following\n\n  return true;\n}\n\nNeedle.prototype.send_request = function(count, method, uri, config, post_data, out, callback) {\n\n  if (typeof config.uri_modifier === 'function') {\n    var modified_uri = config.uri_modifier(uri);\n    debug('Modifying request URI', uri + ' => ' + modified_uri);\n    uri = modified_uri;\n  }\n\n  var request,\n      timer,\n      returned     = 0,\n      self         = this,\n      request_opts = this.get_request_opts(method, uri, config),\n      protocol     = request_opts.protocol == 'https:' ? https : http;\n\n  function done(err, resp) {\n    if (returned++ > 0)\n      return debug('Already finished, stopping here.');\n\n    if (timer) clearTimeout(timer);\n    request.removeListener('error', had_error);\n    out.done = true;\n\n    if (callback)\n      return callback(err, resp, resp ? resp.body : undefined);\n\n    // NOTE: this event used to be called 'end', but the behaviour was confusing\n    // when errors ocurred, because the stream would still emit an 'end' event.\n    out.emit('done', err);\n\n    // trigger the 'done' event on streams we're being piped to, if any\n    var pipes = out._readableState.pipes || [];\n    if (!pipes.forEach) pipes = [pipes];\n    pipes.forEach(function(st) { st.emit('done', err); })\n  }\n\n  function had_error(err) {\n    debug('Request error', err);\n    out.emit('err', err);\n    done(err || new Error('Unknown error when making request.'));\n  }\n\n  function set_timeout(type, milisecs) {\n    if (timer) clearTimeout(timer);\n    if (milisecs <= 0) return;\n\n    timer = setTimeout(function() {\n      out.emit('timeout', type);\n      request.abort();\n      // also invoke done() to terminate job on read_timeout\n      if (type == 'read') done(new Error(type + ' timeout'));\n    }, milisecs);\n  }\n\n  // handle errors on the underlying socket, that may be closed while writing\n  // for an example case, see test/long_string_spec.js. we make sure this\n  // scenario ocurred by verifying the socket's writable & destroyed states.\n  function on_socket_end() {\n    if (returned && !this.writable && this.destroyed === false) {\n      this.destroy();\n      had_error(new Error('Remote end closed socket abruptly.'))\n    }\n  }\n\n  debug('Making request #' + count, request_opts);\n  request = protocol.request(request_opts, function(resp) {\n\n    var headers = resp.headers;\n    debug('Got response', resp.statusCode, headers);\n    out.emit('response', resp);\n\n    set_timeout('read', config.read_timeout);\n\n    // if we got cookies, parse them unless we were instructed not to. make sure to include any\n    // cookies that might have been set on previous redirects.\n    if (config.parse_cookies && (headers['set-cookie'] || config.previous_resp_cookies)) {\n      resp.cookies = extend(config.previous_resp_cookies || {}, cookies.read(headers['set-cookie']));\n      debug('Got cookies', resp.cookies);\n    }\n\n    // if redirect code is found, determine if we should follow it according to the given options.\n    if (redirect_codes.indexOf(resp.statusCode) !== -1 && self.should_follow(headers.location, config, uri)) {\n      // clear timer before following redirects to prevent unexpected setTimeout consequence\n      clearTimeout(timer);\n\n      if (count <= config.follow_max) {\n        out.emit('redirect', headers.location);\n\n        // unless 'follow_keep_method' is true, rewrite the request to GET before continuing.\n        if (!config.follow_keep_method) {\n          method    = 'GET';\n          post_data = null;\n          delete config.headers['content-length']; // in case the original was a multipart POST request.\n        }\n\n        // if follow_set_cookies is true, insert cookies in the next request's headers.\n        // we set both the original request cookies plus any response cookies we might have received.\n        if (config.follow_set_cookies) {\n          var request_cookies = cookies.read(config.headers['cookie']);\n          config.previous_resp_cookies = resp.cookies;\n          if (Object.keys(request_cookies).length || Object.keys(resp.cookies || {}).length) {\n            config.headers['cookie'] = cookies.write(extend(request_cookies, resp.cookies));\n          }\n        } else if (config.headers['cookie']) {\n          debug('Clearing original request cookie', config.headers['cookie']);\n          delete config.headers['cookie'];\n        }\n\n        if (config.follow_set_referer)\n          config.headers['referer'] = encodeURI(uri); // the original, not the destination URL.\n\n        config.headers['host'] = null; // clear previous Host header to avoid conflicts.\n\n        var redirect_url = resolve_url(headers.location, uri);\n        debug('Redirecting to ' +  redirect_url.toString());\n        return self.send_request(++count, method, redirect_url.toString(), config, post_data, out, callback);\n      } else if (config.follow_max > 0) {\n        return done(new Error('Max redirects reached. Possible loop in: ' + headers.location));\n      }\n    }\n\n    // if auth is requested and credentials were not passed, resend request, provided we have user/pass.\n    if (resp.statusCode == 401 && headers['www-authenticate'] && config.credentials) {\n      if (!config.headers['authorization']) { // only if authentication hasn't been sent\n        var auth_header = auth.header(headers['www-authenticate'], config.credentials, request_opts);\n\n        if (auth_header) {\n          config.headers['authorization'] = auth_header;\n          return self.send_request(count, method, uri, config, post_data, out, callback);\n        }\n      }\n    }\n\n    // ok, so we got a valid (non-redirect & authorized) response. let's notify the stream guys.\n    out.emit('header', resp.statusCode, headers);\n    out.emit('headers', headers);\n\n    var pipeline      = [],\n        mime          = parse_content_type(headers['content-type']),\n        text_response = mime.type && (mime.type.indexOf('text/') != -1 || !!mime.type.match(/(\\/|\\+)(xml|json)$/));\n\n    // To start, if our body is compressed and we're able to inflate it, do it.\n    if (headers['content-encoding'] && decompressors[headers['content-encoding']]) {\n\n      var decompressor = decompressors[headers['content-encoding']]();\n\n      // make sure we catch errors triggered by the decompressor.\n      decompressor.on('error', had_error);\n      pipeline.push(decompressor);\n    }\n\n    // If parse is enabled and we have a parser for it, then go for it.\n    if (config.parser && parsers[mime.type]) {\n\n      // If a specific parser was requested, make sure we don't parse other types.\n      var parser_name = config.parser.toString().toLowerCase();\n      if (['xml', 'json'].indexOf(parser_name) == -1 || parsers[mime.type].name == parser_name) {\n\n        // OK, so either we're parsing all content types or the one requested matches.\n        out.parser = parsers[mime.type].name;\n        pipeline.push(parsers[mime.type].fn());\n\n        // Set objectMode on out stream to improve performance.\n        out._writableState.objectMode = true;\n        out._readableState.objectMode = true;\n      }\n\n    // If we're not parsing, and unless decoding was disabled, we'll try\n    // decoding non UTF-8 bodies to UTF-8, using the iconv-lite library.\n    } else if (text_response && config.decode_response && mime.charset) {\n      pipeline.push(decoder(mime.charset));\n    }\n\n    // And `out` is the stream we finally push the decoded/parsed output to.\n    pipeline.push(out);\n\n    // Now, release the kraken!\n    pump_streams([resp].concat(pipeline), function(err) {\n      if (err) debug(err)\n\n      // on node v8.x, if an error ocurrs on the receiving end,\n      // then we want to abort the request to avoid having dangling sockets\n      if (err && err.message == 'write after end') request.destroy();\n    });\n\n    // If the user has requested and output file, pipe the output stream to it.\n    // In stream mode, we will still get the response stream to play with.\n    if (config.output && resp.statusCode == 200) {\n\n      // for some reason, simply piping resp to the writable stream doesn't\n      // work all the time (stream gets cut in the middle with no warning).\n      // so we'll manually need to do the readable/write(chunk) trick.\n      var file = fs.createWriteStream(config.output);\n      file.on('error', had_error);\n\n      out.on('end', function() {\n        if (file.writable) file.end();\n      });\n\n      file.on('close', function() {\n        delete out.file;\n      })\n\n      out.on('readable', function() {\n        var chunk;\n        while ((chunk = this.read()) !== null) {\n          if (file.writable) file.write(chunk);\n\n          // if callback was requested, also push it to resp.body\n          if (resp.body) resp.body.push(chunk);\n        }\n      })\n\n      out.file = file;\n    }\n\n    // Only aggregate the full body if a callback was requested.\n    if (callback) {\n      resp.raw   = [];\n      resp.body  = [];\n      resp.bytes = 0;\n\n      // Gather and count the amount of (raw) bytes using a PassThrough stream.\n      var clean_pipe = new stream.PassThrough();\n\n      clean_pipe.on('readable', function() {\n        var chunk;\n        while ((chunk = this.read()) != null) {\n          resp.bytes += chunk.length;\n          resp.raw.push(chunk);\n        }\n      })\n\n      pump_streams([resp, clean_pipe], function(err) {\n        if (err) debug(err);\n      });\n\n      // Listen on the 'readable' event to aggregate the chunks, but only if\n      // file output wasn't requested. Otherwise we'd have two stream readers.\n      if (!config.output || resp.statusCode != 200) {\n        out.on('readable', function() {\n          var chunk;\n          while ((chunk = this.read()) !== null) {\n            // We're either pushing buffers or objects, never strings.\n            if (typeof chunk == 'string') chunk = Buffer.from(chunk);\n\n            // Push all chunks to resp.body. We'll bind them in resp.end().\n            resp.body.push(chunk);\n          }\n        })\n      }\n    }\n\n    // And set the .body property once all data is in.\n    out.on('end', function() {\n      if (resp.body) { // callback mode\n\n        // we want to be able to access to the raw data later, so keep a reference.\n        resp.raw = Buffer.concat(resp.raw);\n\n        // if parse was successful, we should have an array with one object\n        if (resp.body[0] !== undefined && !Buffer.isBuffer(resp.body[0])) {\n\n          // that's our body right there.\n          resp.body = resp.body[0];\n\n          // set the parser property on our response. we may want to check.\n          if (out.parser) resp.parser = out.parser;\n\n        } else { // we got one or several buffers. string or binary.\n          resp.body = Buffer.concat(resp.body);\n\n          // if we're here and parsed is true, it means we tried to but it didn't work.\n          // so given that we got a text response, let's stringify it.\n          if (text_response || out.parser) {\n            resp.body = resp.body.toString();\n          }\n        }\n      }\n\n      // if an output file is being written to, make sure the callback\n      // is triggered after all data has been written to it.\n      if (out.file) {\n        out.file.on('close', function() {\n          done(null, resp);\n        })\n      } else { // elvis has left the building.\n        done(null, resp);\n      }\n\n    });\n\n    // out.on('error', function(err) {\n    //   had_error(err);\n    //   if (err.code == 'ERR_STREAM_DESTROYED' || err.code == 'ERR_STREAM_PREMATURE_CLOSE') {\n    //     request.abort();\n    //   }\n    // })\n\n  }); // end request call\n\n  // unless open_timeout was disabled, set a timeout to abort the request.\n  set_timeout('open', config.open_timeout);\n\n  // handle errors on the request object. things might get bumpy.\n  request.on('error', had_error);\n\n  // make sure timer is cleared if request is aborted (issue #257)\n  request.once('abort', function() {\n    if (timer) clearTimeout(timer);\n  })\n\n  // handle socket 'end' event to ensure we don't get delayed EPIPE errors.\n  request.once('socket', function(socket) {\n    if (socket.connecting) {\n      socket.once('connect', function() {\n        set_timeout('response', config.response_timeout);\n      })\n    } else {\n      set_timeout('response', config.response_timeout);\n    }\n\n    // socket.once('close', function(e) {\n    //   console.log('socket closed!', e);\n    // })\n\n    if (!socket.on_socket_end) {\n      socket.on_socket_end = on_socket_end;\n      socket.once('end', function() { process.nextTick(on_socket_end.bind(socket)) });\n    }\n  })\n\n  if (post_data) {\n    if (is_stream(post_data)) {\n      pump_streams([post_data, request], function(err) {\n        if (err) debug(err);\n      });\n    } else {\n      request.write(post_data, config.encoding);\n      request.end();\n    }\n  } else {\n    request.end();\n  }\n\n  out.abort = function() { request.abort() }; // easier access\n  out.request = request;\n  return out;\n}\n\n//////////////////////////////////////////\n// exports\n\nif (typeof Promise !== 'undefined') {\n  module.exports = function() {\n    var verb, args = [].slice.call(arguments);\n\n    if (args[0].match(/\\.|\\//)) // first argument looks like a URL\n      verb = (args.length > 2) ? 'post' : 'get';\n    else\n      verb = args.shift();\n\n    if (verb.match(/get|head/i) && args.length == 2)\n      args.splice(1, 0, null); // assume no data if head/get with two args (url, options)\n\n    return new Promise(function(resolve, reject) {\n      module.exports.request(verb, args[0], args[1], args[2], function(err, resp) {\n        return err ? reject(err) : resolve(resp);\n      });\n    })\n  }\n}\n\nmodule.exports.version = version;\n\nmodule.exports.defaults = function(obj) {\n  for (var key in obj) {\n    var target_key = aliased.options[key] || key;\n\n    if (defaults.hasOwnProperty(target_key) && typeof obj[key] != 'undefined') {\n      if (target_key != 'parse_response' && target_key != 'proxy') {\n        // ensure type matches the original, except for proxy/parse_response that can be null/bool or string\n        var valid_type = defaults[target_key].constructor.name;\n\n        if (obj[key].constructor.name != valid_type)\n          throw new TypeError('Invalid type for ' + key + ', should be ' + valid_type);\n      }\n      defaults[target_key] = obj[key];\n    } else {\n      throw new Error('Invalid property for defaults:' + target_key);\n    }\n  }\n\n  return defaults;\n}\n\n'head get'.split(' ').forEach(function(method) {\n  module.exports[method] = function(uri, options, callback) {\n    return new Needle(method, uri, null, options, callback).start();\n  }\n})\n\n'post put patch delete'.split(' ').forEach(function(method) {\n  module.exports[method] = function(uri, data, options, callback) {\n    return new Needle(method, uri, data, options, callback).start();\n  }\n})\n\nmodule.exports.request = function(method, uri, data, opts, callback) {\n  return new Needle(method, uri, data, opts, callback).start();\n};\n"]},"metadata":{},"sourceType":"script"}