{"ast":null,"code":"// An Entry consisting of:\n//\n// \"%d %s=%s\\n\", <length>, <keyword>, <value>\n//\n// The length is a decimal number, and includes itself and the \\n\n// \\0 does not terminate anything.  Only the length terminates the string.\n// Numeric values are decimal strings.\nmodule.exports = ExtendedHeader;\n\nvar Entry = require(\"./entry.js\"),\n    inherits = require(\"inherits\"),\n    tar = require(\"../tar.js\"),\n    numeric = tar.numeric,\n    keyTrans = {\n  \"SCHILY.dev\": \"dev\",\n  \"SCHILY.ino\": \"ino\",\n  \"SCHILY.nlink\": \"nlink\"\n};\n\nfunction ExtendedHeader() {\n  Entry.apply(this, arguments);\n  this.on(\"data\", this._parse);\n  this.fields = {};\n  this._position = 0;\n  this._fieldPos = 0;\n  this._state = SIZE;\n  this._sizeBuf = [];\n  this._keyBuf = [];\n  this._valBuf = [];\n  this._size = -1;\n  this._key = \"\";\n}\n\ninherits(ExtendedHeader, Entry);\nExtendedHeader.prototype._parse = parse;\nvar s = 0,\n    states = ExtendedHeader.states = {},\n    SIZE = states.SIZE = s++,\n    KEY = states.KEY = s++,\n    VAL = states.VAL = s++,\n    ERR = states.ERR = s++;\nObject.keys(states).forEach(function (s) {\n  states[states[s]] = states[s];\n});\nstates[s] = null; // char code values for comparison\n\nvar _0 = \"0\".charCodeAt(0),\n    _9 = \"9\".charCodeAt(0),\n    point = \".\".charCodeAt(0),\n    a = \"a\".charCodeAt(0),\n    Z = \"Z\".charCodeAt(0),\n    a = \"a\".charCodeAt(0),\n    z = \"z\".charCodeAt(0),\n    space = \" \".charCodeAt(0),\n    eq = \"=\".charCodeAt(0),\n    cr = \"\\n\".charCodeAt(0);\n\nfunction parse(c) {\n  if (this._state === ERR) return;\n\n  for (var i = 0, l = c.length; i < l; this._position++, this._fieldPos++, i++) {\n    // console.error(\"top of loop, size=\"+this._size)\n    var b = c[i];\n\n    if (this._size >= 0 && this._fieldPos > this._size) {\n      error(this, \"field exceeds length=\" + this._size);\n      return;\n    }\n\n    switch (this._state) {\n      case ERR:\n        return;\n\n      case SIZE:\n        // console.error(\"parsing size, b=%d, rest=%j\", b, c.slice(i).toString())\n        if (b === space) {\n          this._state = KEY; // this._fieldPos = this._sizeBuf.length\n\n          this._size = parseInt(new Buffer(this._sizeBuf).toString(), 10);\n          this._sizeBuf.length = 0;\n          continue;\n        }\n\n        if (b < _0 || b > _9) {\n          error(this, \"expected [\" + _0 + \"..\" + _9 + \"], got \" + b);\n          return;\n        }\n\n        this._sizeBuf.push(b);\n\n        continue;\n\n      case KEY:\n        // can be any char except =, not > size.\n        if (b === eq) {\n          this._state = VAL;\n          this._key = new Buffer(this._keyBuf).toString();\n          if (keyTrans[this._key]) this._key = keyTrans[this._key];\n          this._keyBuf.length = 0;\n          continue;\n        }\n\n        this._keyBuf.push(b);\n\n        continue;\n\n      case VAL:\n        // field must end with cr\n        if (this._fieldPos === this._size - 1) {\n          // console.error(\"finished with \"+this._key)\n          if (b !== cr) {\n            error(this, \"expected \\\\n at end of field\");\n            return;\n          }\n\n          var val = new Buffer(this._valBuf).toString();\n\n          if (numeric[this._key]) {\n            val = parseFloat(val);\n          }\n\n          this.fields[this._key] = val;\n          this._valBuf.length = 0;\n          this._state = SIZE;\n          this._size = -1;\n          this._fieldPos = -1;\n          continue;\n        }\n\n        this._valBuf.push(b);\n\n        continue;\n    }\n  }\n}\n\nfunction error(me, msg) {\n  msg = \"invalid header: \" + msg + \"\\nposition=\" + me._position + \"\\nfield position=\" + me._fieldPos;\n  me.error(msg);\n  me.state = ERR;\n}","map":{"version":3,"sources":["/Users/samilvaliahmetov/education/programming/schoolProject/my-app/node_modules/node-gyp/node_modules/tar/lib/extended-header.js"],"names":["module","exports","ExtendedHeader","Entry","require","inherits","tar","numeric","keyTrans","apply","arguments","on","_parse","fields","_position","_fieldPos","_state","SIZE","_sizeBuf","_keyBuf","_valBuf","_size","_key","prototype","parse","s","states","KEY","VAL","ERR","Object","keys","forEach","_0","charCodeAt","_9","point","a","Z","z","space","eq","cr","c","i","l","length","b","error","parseInt","Buffer","toString","push","val","parseFloat","me","msg","state"],"mappings":"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","sourcesContent":["// An Entry consisting of:\n//\n// \"%d %s=%s\\n\", <length>, <keyword>, <value>\n//\n// The length is a decimal number, and includes itself and the \\n\n// \\0 does not terminate anything.  Only the length terminates the string.\n// Numeric values are decimal strings.\n\nmodule.exports = ExtendedHeader\n\nvar Entry = require(\"./entry.js\")\n  , inherits = require(\"inherits\")\n  , tar = require(\"../tar.js\")\n  , numeric = tar.numeric\n  , keyTrans = { \"SCHILY.dev\": \"dev\"\n               , \"SCHILY.ino\": \"ino\"\n               , \"SCHILY.nlink\": \"nlink\" }\n\nfunction ExtendedHeader () {\n  Entry.apply(this, arguments)\n  this.on(\"data\", this._parse)\n  this.fields = {}\n  this._position = 0\n  this._fieldPos = 0\n  this._state = SIZE\n  this._sizeBuf = []\n  this._keyBuf = []\n  this._valBuf = []\n  this._size = -1\n  this._key = \"\"\n}\n\ninherits(ExtendedHeader, Entry)\nExtendedHeader.prototype._parse = parse\n\nvar s = 0\n  , states = ExtendedHeader.states = {}\n  , SIZE = states.SIZE = s++\n  , KEY  = states.KEY  = s++\n  , VAL  = states.VAL  = s++\n  , ERR  = states.ERR  = s++\n\nObject.keys(states).forEach(function (s) {\n  states[states[s]] = states[s]\n})\n\nstates[s] = null\n\n// char code values for comparison\nvar _0 = \"0\".charCodeAt(0)\n  , _9 = \"9\".charCodeAt(0)\n  , point = \".\".charCodeAt(0)\n  , a = \"a\".charCodeAt(0)\n  , Z = \"Z\".charCodeAt(0)\n  , a = \"a\".charCodeAt(0)\n  , z = \"z\".charCodeAt(0)\n  , space = \" \".charCodeAt(0)\n  , eq = \"=\".charCodeAt(0)\n  , cr = \"\\n\".charCodeAt(0)\n\nfunction parse (c) {\n  if (this._state === ERR) return\n\n  for ( var i = 0, l = c.length\n      ; i < l\n      ; this._position++, this._fieldPos++, i++) {\n    // console.error(\"top of loop, size=\"+this._size)\n\n    var b = c[i]\n\n    if (this._size >= 0 && this._fieldPos > this._size) {\n      error(this, \"field exceeds length=\"+this._size)\n      return\n    }\n\n    switch (this._state) {\n      case ERR: return\n\n      case SIZE:\n        // console.error(\"parsing size, b=%d, rest=%j\", b, c.slice(i).toString())\n        if (b === space) {\n          this._state = KEY\n          // this._fieldPos = this._sizeBuf.length\n          this._size = parseInt(new Buffer(this._sizeBuf).toString(), 10)\n          this._sizeBuf.length = 0\n          continue\n        }\n        if (b < _0 || b > _9) {\n          error(this, \"expected [\" + _0 + \"..\" + _9 + \"], got \" + b)\n          return\n        }\n        this._sizeBuf.push(b)\n        continue\n\n      case KEY:\n        // can be any char except =, not > size.\n        if (b === eq) {\n          this._state = VAL\n          this._key = new Buffer(this._keyBuf).toString()\n          if (keyTrans[this._key]) this._key = keyTrans[this._key]\n          this._keyBuf.length = 0\n          continue\n        }\n        this._keyBuf.push(b)\n        continue\n\n      case VAL:\n        // field must end with cr\n        if (this._fieldPos === this._size - 1) {\n          // console.error(\"finished with \"+this._key)\n          if (b !== cr) {\n            error(this, \"expected \\\\n at end of field\")\n            return\n          }\n          var val = new Buffer(this._valBuf).toString()\n          if (numeric[this._key]) {\n            val = parseFloat(val)\n          }\n          this.fields[this._key] = val\n\n          this._valBuf.length = 0\n          this._state = SIZE\n          this._size = -1\n          this._fieldPos = -1\n          continue\n        }\n        this._valBuf.push(b)\n        continue\n    }\n  }\n}\n\nfunction error (me, msg) {\n  msg = \"invalid header: \" + msg\n      + \"\\nposition=\" + me._position\n      + \"\\nfield position=\" + me._fieldPos\n\n  me.error(msg)\n  me.state = ERR\n}\n"]},"metadata":{},"sourceType":"script"}