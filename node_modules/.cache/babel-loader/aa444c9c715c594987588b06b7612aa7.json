{"ast":null,"code":"module.exports = exports = configure;\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findAccessibleSync: findAccessibleSync,\n  findPython: findPython\n};\n/**\n * Module dependencies.\n */\n\nvar fs = require('graceful-fs'),\n    path = require('path'),\n    log = require('npmlog'),\n    osenv = require('osenv'),\n    which = require('which'),\n    semver = require('semver'),\n    mkdirp = require('mkdirp'),\n    cp = require('child_process'),\n    extend = require('util')._extend,\n    processRelease = require('./process-release'),\n    win = process.platform === 'win32',\n    findNodeDirectory = require('./find-node-directory'),\n    msgFormat = require('util').format;\n\nif (win) var findVS2017 = require('./find-vs2017');\nexports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module';\n\nfunction configure(gyp, argv, callback) {\n  var python = gyp.opts.python || process.env.PYTHON || 'python2',\n      buildDir = path.resolve('build'),\n      configNames = ['config.gypi', 'common.gypi'],\n      configs = [],\n      nodeDir,\n      release = processRelease(argv, gyp, process.version, process.release);\n  findPython(python, function (err, found) {\n    if (err) {\n      callback(err);\n    } else {\n      python = found;\n      getNodeDir();\n    }\n  });\n\n  function getNodeDir() {\n    // 'python' should be set by now\n    process.env.PYTHON = python;\n\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, osenv.home());\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir);\n      createBuildDir();\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version);\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version);\n      }\n\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version));\n      } // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n\n\n      gyp.opts.ensure = gyp.opts.tarball ? false : true;\n      gyp.commands.install([release.version], function (err, version) {\n        if (err) return callback(err);\n        log.verbose('get node dir', 'target node version installed:', release.versionDir);\n        nodeDir = path.resolve(gyp.devDir, release.versionDir);\n        createBuildDir();\n      });\n    }\n  }\n\n  function createBuildDir() {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir);\n    mkdirp(buildDir, function (err, isNew) {\n      if (err) return callback(err);\n      log.verbose('build dir', '\"build\" dir needed to be created?', isNew);\n\n      if (win && (!gyp.opts.msvs_version || gyp.opts.msvs_version === '2017')) {\n        findVS2017(function (err, vsSetup) {\n          if (err) {\n            log.verbose('Not using VS2017:', err.message);\n            createConfigFile();\n          } else {\n            createConfigFile(null, vsSetup);\n          }\n        });\n      } else {\n        createConfigFile();\n      }\n    });\n  }\n\n  function createConfigFile(err, vsSetup) {\n    if (err) return callback(err);\n    var configFilename = 'config.gypi';\n    var configPath = path.resolve(buildDir, configFilename);\n    log.verbose('build/' + configFilename, 'creating config file');\n    var config = process.config || {},\n        defaults = config.target_defaults,\n        variables = config.variables; // default \"config.variables\"\n\n    if (!variables) variables = config.variables = {}; // default \"config.defaults\"\n\n    if (!defaults) defaults = config.target_defaults = {}; // don't inherit the \"defaults\" from node's `process.config` object.\n    // doing so could cause problems in cases where the `node` executable was\n    // compiled on a different machine (with different lib/include paths) than\n    // the machine where the addon is being built to\n\n    defaults.cflags = [];\n    defaults.defines = [];\n    defaults.include_dirs = [];\n    defaults.libraries = []; // set the default_configuration prop\n\n    if ('debug' in gyp.opts) {\n      defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release';\n    }\n\n    if (!defaults.default_configuration) {\n      defaults.default_configuration = 'Release';\n    } // set the target_arch variable\n\n\n    variables.target_arch = gyp.opts.arch || process.arch || 'ia32'; // set the node development directory\n\n    variables.nodedir = nodeDir; // disable -T \"thin\" static archives by default\n\n    variables.standalone_static_library = gyp.opts.thin ? 0 : 1;\n\n    if (vsSetup) {\n      // GYP doesn't (yet) have support for VS2017, so we force it to VS2015\n      // to avoid pulling a floating patch that has not landed upstream.\n      // Ref: https://chromium-review.googlesource.com/#/c/433540/\n      gyp.opts.msvs_version = '2015';\n      process.env['GYP_MSVS_VERSION'] = 2015;\n      process.env['GYP_MSVS_OVERRIDE_PATH'] = vsSetup.path;\n      defaults['msbuild_toolset'] = 'v141';\n      defaults['msvs_windows_target_platform_version'] = vsSetup.sdk;\n      variables['msbuild_path'] = path.join(vsSetup.path, 'MSBuild', '15.0', 'Bin', 'MSBuild.exe');\n    } // loop through the rest of the opts and add the unknown ones as variables.\n    // this allows for module-specific configure flags like:\n    //\n    //   $ node-gyp configure --shared-libxml2\n\n\n    Object.keys(gyp.opts).forEach(function (opt) {\n      if (opt === 'argv') return;\n      if (opt in gyp.configDefs) return;\n      variables[opt.replace(/-/g, '_')] = gyp.opts[opt];\n    }); // ensures that any boolean values from `process.config` get stringified\n\n    function boolsToString(k, v) {\n      if (typeof v === 'boolean') return String(v);\n      return v;\n    }\n\n    log.silly('build/' + configFilename, config); // now write out the config.gypi file to the build/ dir\n\n    var prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step',\n        json = JSON.stringify(config, boolsToString, 2);\n    log.verbose('build/' + configFilename, 'writing out config file: %s', configPath);\n    configs.push(configPath);\n    fs.writeFile(configPath, [prefix, json, ''].join('\\n'), findConfigs);\n  }\n\n  function findConfigs(err) {\n    if (err) return callback(err);\n    var name = configNames.shift();\n    if (!name) return runGyp();\n    var fullPath = path.resolve(name);\n    log.verbose(name, 'checking for gypi file: %s', fullPath);\n    fs.stat(fullPath, function (err, stat) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          findConfigs(); // check next gypi filename\n        } else {\n          callback(err);\n        }\n      } else {\n        log.verbose(name, 'found gypi file');\n        configs.push(fullPath);\n        findConfigs();\n      }\n    });\n  }\n\n  function runGyp(err) {\n    if (err) return callback(err);\n\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"'); // force the 'make' target for non-Windows\n\n        argv.push('-f', 'msvs');\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"'); // force the 'make' target for non-Windows\n\n        argv.push('-f', 'make');\n      }\n    }\n\n    function hasMsvsVersion() {\n      return argv.some(function (arg) {\n        return arg.indexOf('msvs_version') === 0;\n      });\n    }\n\n    if (win && !hasMsvsVersion()) {\n      if ('msvs_version' in gyp.opts) {\n        argv.push('-G', 'msvs_version=' + gyp.opts.msvs_version);\n      } else {\n        argv.push('-G', 'msvs_version=auto');\n      }\n    } // include all the \".gypi\" files that were found\n\n\n    configs.forEach(function (config) {\n      argv.push('-I', config);\n    }); // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking. \n\n    var node_exp_file = undefined;\n\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x';\n      var node_root_dir = findNodeDirectory();\n      var candidates = undefined;\n\n      if (process.platform === 'aix') {\n        candidates = ['include/node/node', 'out/Release/node', 'out/Debug/node', 'node'].map(function (file) {\n          return file + '.' + ext;\n        });\n      } else {\n        candidates = ['out/Release/obj.target/libnode', 'out/Debug/obj.target/libnode', 'lib/libnode'].map(function (file) {\n          return file + '.' + ext;\n        });\n      }\n\n      var logprefix = 'find exports file';\n      node_exp_file = findAccessibleSync(logprefix, node_root_dir, candidates);\n\n      if (node_exp_file !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', node_exp_file);\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, node_root_dir);\n        log.error(logprefix, 'Could not find exports file');\n        return callback(new Error(msg));\n      }\n    } // this logic ported from the old `gyp_addon` python file\n\n\n    var gyp_script = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py');\n    var addon_gypi = path.resolve(__dirname, '..', 'addon.gypi');\n    var common_gypi = path.resolve(nodeDir, 'include/node/common.gypi');\n    fs.stat(common_gypi, function (err, stat) {\n      if (err) common_gypi = path.resolve(nodeDir, 'common.gypi');\n      var output_dir = 'build';\n\n      if (win) {\n        // Windows expects an absolute path\n        output_dir = buildDir;\n      }\n\n      var nodeGypDir = path.resolve(__dirname, '..');\n      var nodeLibFile = path.join(nodeDir, !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)', release.name + '.lib');\n      argv.push('-I', addon_gypi);\n      argv.push('-I', common_gypi);\n      argv.push('-Dlibrary=shared_library');\n      argv.push('-Dvisibility=default');\n      argv.push('-Dnode_root_dir=' + nodeDir);\n\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + node_exp_file);\n      }\n\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir);\n      argv.push('-Dnode_lib_file=' + nodeLibFile);\n      argv.push('-Dmodule_root_dir=' + process.cwd());\n      argv.push('-Dnode_engine=' + (gyp.opts.node_engine || process.jsEngine || 'v8'));\n      argv.push('--depth=.');\n      argv.push('--no-parallel'); // tell gyp to write the Makefile/Solution files into output_dir\n\n      argv.push('--generator-output', output_dir); // tell make to write its output into the same dir\n\n      argv.push('-Goutput_dir=.'); // enforce use of the \"binding.gyp\" file\n\n      argv.unshift('binding.gyp'); // execute `gyp` from the current target nodedir\n\n      argv.unshift(gyp_script); // make sure python uses files that came with this particular node package\n\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')];\n\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH);\n      }\n\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':');\n      var cp = gyp.spawn(python, argv);\n      cp.on('exit', onCpExit);\n    });\n  }\n  /**\n   * Called when the `gyp` child process exits.\n   */\n\n\n  function onCpExit(code, signal) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code));\n    } else {\n      // we're done\n      callback();\n    }\n  }\n}\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\n\n\nfunction findAccessibleSync(logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n    var candidate = path.resolve(dir, candidates[next]);\n\n    try {\n      var fd = fs.openSync(candidate, 'r');\n    } catch (e) {\n      // this candidate was not found or not readable, do nothing\n      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message);\n      continue;\n    }\n\n    fs.closeSync(fd);\n    log.silly(logprefix, 'Found readable %s', candidate);\n    return candidate;\n  }\n\n  return undefined;\n}\n\nfunction PythonFinder(python, callback) {\n  this.callback = callback;\n  this.python = python;\n}\n\nPythonFinder.prototype = {\n  checkPythonLauncherDepth: 0,\n  env: process.env,\n  execFile: cp.execFile,\n  log: log,\n  resolve: path.win32 && path.win32.resolve || path.resolve,\n  stat: fs.stat,\n  which: which,\n  win: win,\n  checkPython: function checkPython() {\n    this.log.verbose('check python', 'checking for Python executable \"%s\" in the PATH', this.python);\n    this.which(this.python, function (err, execPath) {\n      if (err) {\n        this.log.verbose('`which` failed', this.python, err);\n\n        if (this.python === 'python2') {\n          this.python = 'python';\n          return this.checkPython();\n        }\n\n        if (this.win) {\n          this.checkPythonLauncher();\n        } else {\n          this.failNoPython();\n        }\n      } else {\n        this.log.verbose('`which` succeeded', this.python, execPath); // Found the `python` executable, and from now on we use it explicitly.\n        // This solves #667 and #750 (`execFile` won't run batch files\n        // (*.cmd, and *.bat))\n\n        this.python = execPath;\n        this.checkPythonVersion();\n      }\n    }.bind(this));\n  },\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports all versions of Python, we have to\n  // explicitly request a Python 2 version. This is done by supplying \"-2\" as\n  // the first command line argument. Since \"py.exe -2\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPythonLauncher: function checkPythonLauncher() {\n    this.checkPythonLauncherDepth += 1;\n    this.log.verbose('could not find \"' + this.python + '\". checking python launcher');\n    var env = extend({}, this.env);\n    env.TERM = 'dumb';\n    var launcherArgs = ['-2', '-c', 'import sys; print sys.executable'];\n    this.execFile('py.exe', launcherArgs, {\n      env: env\n    }, function (err, stdout) {\n      if (err) {\n        this.guessPython();\n      } else {\n        this.python = stdout.trim();\n        this.log.verbose('check python launcher', 'python executable found: %j', this.python);\n        this.checkPythonVersion();\n      }\n\n      this.checkPythonLauncherDepth -= 1;\n    }.bind(this));\n  },\n  checkPythonVersion: function checkPythonVersion() {\n    var args = ['-c', 'import sys; print \"%s.%s.%s\" % sys.version_info[:3];'];\n    var env = extend({}, this.env);\n    env.TERM = 'dumb';\n    this.execFile(this.python, args, {\n      env: env\n    }, function (err, stdout) {\n      if (err) {\n        return this.callback(err);\n      }\n\n      this.log.verbose('check python version', '`%s -c \"' + args[1] + '\"` returned: %j', this.python, stdout);\n      var version = stdout.trim();\n      var range = semver.Range('>=2.5.0 <3.0.0');\n      var valid = false;\n\n      try {\n        valid = range.test(version);\n      } catch (e) {\n        this.log.silly('range.test() error', e);\n      }\n\n      if (valid) {\n        this.callback(null, this.python);\n      } else if (this.win && this.checkPythonLauncherDepth === 0) {\n        this.checkPythonLauncher();\n      } else {\n        this.failPythonVersion(version);\n      }\n    }.bind(this));\n  },\n  failNoPython: function failNoPython() {\n    var errmsg = 'Can\\'t find Python executable \"' + this.python + '\", you can set the PYTHON env variable.';\n    this.callback(new Error(errmsg));\n  },\n  failPythonVersion: function failPythonVersion(badVersion) {\n    var errmsg = 'Python executable \"' + this.python + '\" is v' + badVersion + ', which is not supported by gyp.\\n' + 'You can pass the --python switch to point to ' + 'Python >= v2.5.0 & < 3.0.0.';\n    this.callback(new Error(errmsg));\n  },\n  // Called on Windows when \"python\" isn't available in the current $PATH.\n  // We are going to check if \"%SystemDrive%\\python27\\python.exe\" exists.\n  guessPython: function guessPython() {\n    this.log.verbose('could not find \"' + this.python + '\". guessing location');\n    var rootDir = this.env.SystemDrive || 'C:\\\\';\n\n    if (rootDir[rootDir.length - 1] !== '\\\\') {\n      rootDir += '\\\\';\n    }\n\n    var pythonPath = this.resolve(rootDir, 'Python27', 'python.exe');\n    this.log.verbose('ensuring that file exists:', pythonPath);\n    this.stat(pythonPath, function (err, stat) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          this.failNoPython();\n        } else {\n          this.callback(err);\n        }\n\n        return;\n      }\n\n      this.python = pythonPath;\n      this.checkPythonVersion();\n    }.bind(this));\n  }\n};\n\nfunction findPython(python, callback) {\n  var finder = new PythonFinder(python, callback);\n  finder.checkPython();\n}","map":{"version":3,"sources":["/Users/samilvaliahmetov/education/programming/schoolProject/my-app/node_modules/node-gyp/lib/configure.js"],"names":["module","exports","configure","test","PythonFinder","findAccessibleSync","findPython","fs","require","path","log","osenv","which","semver","mkdirp","cp","extend","_extend","processRelease","win","process","platform","findNodeDirectory","msgFormat","format","findVS2017","usage","gyp","argv","callback","python","opts","env","PYTHON","buildDir","resolve","configNames","configs","nodeDir","release","version","err","found","getNodeDir","nodedir","replace","home","verbose","createBuildDir","Error","ensure","tarball","commands","install","versionDir","devDir","isNew","msvs_version","vsSetup","message","createConfigFile","configFilename","configPath","config","defaults","target_defaults","variables","cflags","defines","include_dirs","libraries","default_configuration","debug","target_arch","arch","standalone_static_library","thin","sdk","join","Object","keys","forEach","opt","configDefs","boolsToString","k","v","String","silly","prefix","json","JSON","stringify","push","writeFile","findConfigs","name","shift","runGyp","fullPath","stat","code","indexOf","hasMsvsVersion","some","arg","node_exp_file","undefined","ext","node_root_dir","candidates","map","file","logprefix","msg","error","gyp_script","__dirname","addon_gypi","common_gypi","output_dir","nodeGypDir","nodeLibFile","cwd","node_engine","jsEngine","unshift","pypath","PYTHONPATH","spawn","on","onCpExit","signal","dir","next","length","candidate","fd","openSync","e","closeSync","prototype","checkPythonLauncherDepth","execFile","win32","checkPython","execPath","checkPythonLauncher","failNoPython","checkPythonVersion","bind","TERM","launcherArgs","stdout","guessPython","trim","args","range","Range","valid","failPythonVersion","errmsg","badVersion","rootDir","SystemDrive","pythonPath","finder"],"mappings":"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","sourcesContent":["module.exports = exports = configure\nmodule.exports.test = {\n  PythonFinder: PythonFinder,\n  findAccessibleSync: findAccessibleSync,\n  findPython: findPython,\n}\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('graceful-fs')\n  , path = require('path')\n  , log = require('npmlog')\n  , osenv = require('osenv')\n  , which = require('which')\n  , semver = require('semver')\n  , mkdirp = require('mkdirp')\n  , cp = require('child_process')\n  , extend = require('util')._extend\n  , processRelease = require('./process-release')\n  , win = process.platform === 'win32'\n  , findNodeDirectory = require('./find-node-directory')\n  , msgFormat = require('util').format\nif (win)\n  var findVS2017 = require('./find-vs2017')\n\nexports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module'\n\nfunction configure (gyp, argv, callback) {\n\n  var python = gyp.opts.python || process.env.PYTHON || 'python2'\n    , buildDir = path.resolve('build')\n    , configNames = [ 'config.gypi', 'common.gypi' ]\n    , configs = []\n    , nodeDir\n    , release = processRelease(argv, gyp, process.version, process.release)\n\n  findPython(python, function (err, found) {\n    if (err) {\n      callback(err)\n    } else {\n      python = found\n      getNodeDir()\n    }\n  })\n\n  function getNodeDir () {\n\n    // 'python' should be set by now\n    process.env.PYTHON = python\n\n    if (gyp.opts.nodedir) {\n      // --nodedir was specified. use that for the dev files\n      nodeDir = gyp.opts.nodedir.replace(/^~/, osenv.home())\n\n      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir)\n      createBuildDir()\n\n    } else {\n      // if no --nodedir specified, ensure node dependencies are installed\n      if ('v' + release.version !== process.version) {\n        // if --target was given, then determine a target version to compile for\n        log.verbose('get node dir', 'compiling against --target node version: %s', release.version)\n      } else {\n        // if no --target was specified then use the current host node version\n        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version)\n      }\n\n      if (!release.semver) {\n        // could not parse the version string with semver\n        return callback(new Error('Invalid version number: ' + release.version))\n      }\n\n      // If the tarball option is set, always remove and reinstall the headers\n      // into devdir. Otherwise only install if they're not already there.\n      gyp.opts.ensure = gyp.opts.tarball ? false : true\n\n      gyp.commands.install([ release.version ], function (err, version) {\n        if (err) return callback(err)\n        log.verbose('get node dir', 'target node version installed:', release.versionDir)\n        nodeDir = path.resolve(gyp.devDir, release.versionDir)\n        createBuildDir()\n      })\n    }\n  }\n\n  function createBuildDir () {\n    log.verbose('build dir', 'attempting to create \"build\" dir: %s', buildDir)\n    mkdirp(buildDir, function (err, isNew) {\n      if (err) return callback(err)\n      log.verbose('build dir', '\"build\" dir needed to be created?', isNew)\n      if (win && (!gyp.opts.msvs_version || gyp.opts.msvs_version === '2017')) {\n        findVS2017(function (err, vsSetup) {\n          if (err) {\n            log.verbose('Not using VS2017:', err.message)\n            createConfigFile()\n          } else {\n            createConfigFile(null, vsSetup)\n          }\n        })\n      } else {\n        createConfigFile()\n      }\n    })\n  }\n\n  function createConfigFile (err, vsSetup) {\n    if (err) return callback(err)\n\n    var configFilename = 'config.gypi'\n    var configPath = path.resolve(buildDir, configFilename)\n\n    log.verbose('build/' + configFilename, 'creating config file')\n\n    var config = process.config || {}\n      , defaults = config.target_defaults\n      , variables = config.variables\n\n    // default \"config.variables\"\n    if (!variables) variables = config.variables = {}\n\n    // default \"config.defaults\"\n    if (!defaults) defaults = config.target_defaults = {}\n\n    // don't inherit the \"defaults\" from node's `process.config` object.\n    // doing so could cause problems in cases where the `node` executable was\n    // compiled on a different machine (with different lib/include paths) than\n    // the machine where the addon is being built to\n    defaults.cflags = []\n    defaults.defines = []\n    defaults.include_dirs = []\n    defaults.libraries = []\n\n    // set the default_configuration prop\n    if ('debug' in gyp.opts) {\n      defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release'\n    }\n    if (!defaults.default_configuration) {\n      defaults.default_configuration = 'Release'\n    }\n\n    // set the target_arch variable\n    variables.target_arch = gyp.opts.arch || process.arch || 'ia32'\n\n    // set the node development directory\n    variables.nodedir = nodeDir\n\n    // disable -T \"thin\" static archives by default\n    variables.standalone_static_library = gyp.opts.thin ? 0 : 1\n\n    if (vsSetup) {\n      // GYP doesn't (yet) have support for VS2017, so we force it to VS2015\n      // to avoid pulling a floating patch that has not landed upstream.\n      // Ref: https://chromium-review.googlesource.com/#/c/433540/\n      gyp.opts.msvs_version = '2015'\n      process.env['GYP_MSVS_VERSION'] = 2015\n      process.env['GYP_MSVS_OVERRIDE_PATH'] = vsSetup.path\n      defaults['msbuild_toolset'] = 'v141'\n      defaults['msvs_windows_target_platform_version'] = vsSetup.sdk\n      variables['msbuild_path'] = path.join(vsSetup.path, 'MSBuild', '15.0',\n                                            'Bin', 'MSBuild.exe')\n    }\n\n    // loop through the rest of the opts and add the unknown ones as variables.\n    // this allows for module-specific configure flags like:\n    //\n    //   $ node-gyp configure --shared-libxml2\n    Object.keys(gyp.opts).forEach(function (opt) {\n      if (opt === 'argv') return\n      if (opt in gyp.configDefs) return\n      variables[opt.replace(/-/g, '_')] = gyp.opts[opt]\n    })\n\n    // ensures that any boolean values from `process.config` get stringified\n    function boolsToString (k, v) {\n      if (typeof v === 'boolean')\n        return String(v)\n      return v\n    }\n\n    log.silly('build/' + configFilename, config)\n\n    // now write out the config.gypi file to the build/ dir\n    var prefix = '# Do not edit. File was generated by node-gyp\\'s \"configure\" step'\n      , json = JSON.stringify(config, boolsToString, 2)\n    log.verbose('build/' + configFilename, 'writing out config file: %s', configPath)\n    configs.push(configPath)\n    fs.writeFile(configPath, [prefix, json, ''].join('\\n'), findConfigs)\n  }\n\n  function findConfigs (err) {\n    if (err) return callback(err)\n    var name = configNames.shift()\n    if (!name) return runGyp()\n    var fullPath = path.resolve(name)\n    log.verbose(name, 'checking for gypi file: %s', fullPath)\n    fs.stat(fullPath, function (err, stat) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          findConfigs() // check next gypi filename\n        } else {\n          callback(err)\n        }\n      } else {\n        log.verbose(name, 'found gypi file')\n        configs.push(fullPath)\n        findConfigs()\n      }\n    })\n  }\n\n  function runGyp (err) {\n    if (err) return callback(err)\n\n    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {\n      if (win) {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"msvs\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'msvs')\n      } else {\n        log.verbose('gyp', 'gyp format was not specified; forcing \"make\"')\n        // force the 'make' target for non-Windows\n        argv.push('-f', 'make')\n      }\n    }\n\n    function hasMsvsVersion () {\n      return argv.some(function (arg) {\n        return arg.indexOf('msvs_version') === 0\n      })\n    }\n\n    if (win && !hasMsvsVersion()) {\n      if ('msvs_version' in gyp.opts) {\n        argv.push('-G', 'msvs_version=' + gyp.opts.msvs_version)\n      } else {\n        argv.push('-G', 'msvs_version=auto')\n      }\n    }\n\n    // include all the \".gypi\" files that were found\n    configs.forEach(function (config) {\n      argv.push('-I', config)\n    })\n\n    // For AIX and z/OS we need to set up the path to the exports file\n    // which contains the symbols needed for linking. \n    var node_exp_file = undefined\n    if (process.platform === 'aix' || process.platform === 'os390') {\n      var ext = process.platform === 'aix' ? 'exp' : 'x'\n      var node_root_dir = findNodeDirectory()\n      var candidates = undefined \n      if (process.platform === 'aix') {\n        candidates = ['include/node/node',\n                      'out/Release/node',\n                      'out/Debug/node',\n                      'node'\n                     ].map(function(file) {\n                       return file + '.' + ext\n                     })\n      } else {\n        candidates = ['out/Release/obj.target/libnode',\n                      'out/Debug/obj.target/libnode',\n                      'lib/libnode'\n                     ].map(function(file) {\n                       return file + '.' + ext\n                     })\n      }\n      var logprefix = 'find exports file'\n      node_exp_file = findAccessibleSync(logprefix, node_root_dir, candidates)\n      if (node_exp_file !== undefined) {\n        log.verbose(logprefix, 'Found exports file: %s', node_exp_file)\n      } else {\n        var msg = msgFormat('Could not find node.%s file in %s', ext, node_root_dir)\n        log.error(logprefix, 'Could not find exports file')\n        return callback(new Error(msg))\n      }\n    }\n\n    // this logic ported from the old `gyp_addon` python file\n    var gyp_script = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py')\n    var addon_gypi = path.resolve(__dirname, '..', 'addon.gypi')\n    var common_gypi = path.resolve(nodeDir, 'include/node/common.gypi')\n    fs.stat(common_gypi, function (err, stat) {\n      if (err)\n        common_gypi = path.resolve(nodeDir, 'common.gypi')\n\n      var output_dir = 'build'\n      if (win) {\n        // Windows expects an absolute path\n        output_dir = buildDir\n      }\n      var nodeGypDir = path.resolve(__dirname, '..')\n      var nodeLibFile = path.join(nodeDir,\n        !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)',\n        release.name + '.lib')\n\n      argv.push('-I', addon_gypi)\n      argv.push('-I', common_gypi)\n      argv.push('-Dlibrary=shared_library')\n      argv.push('-Dvisibility=default')\n      argv.push('-Dnode_root_dir=' + nodeDir)\n      if (process.platform === 'aix' || process.platform === 'os390') {\n        argv.push('-Dnode_exp_file=' + node_exp_file)\n      }\n      argv.push('-Dnode_gyp_dir=' + nodeGypDir)\n      argv.push('-Dnode_lib_file=' + nodeLibFile)\n      argv.push('-Dmodule_root_dir=' + process.cwd())\n      argv.push('-Dnode_engine=' +\n        (gyp.opts.node_engine || process.jsEngine || 'v8'))\n      argv.push('--depth=.')\n      argv.push('--no-parallel')\n\n      // tell gyp to write the Makefile/Solution files into output_dir\n      argv.push('--generator-output', output_dir)\n\n      // tell make to write its output into the same dir\n      argv.push('-Goutput_dir=.')\n\n      // enforce use of the \"binding.gyp\" file\n      argv.unshift('binding.gyp')\n\n      // execute `gyp` from the current target nodedir\n      argv.unshift(gyp_script)\n\n      // make sure python uses files that came with this particular node package\n      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')]\n      if (process.env.PYTHONPATH) {\n        pypath.push(process.env.PYTHONPATH)\n      }\n      process.env.PYTHONPATH = pypath.join(win ? ';' : ':')\n\n      var cp = gyp.spawn(python, argv)\n      cp.on('exit', onCpExit)\n    })\n  }\n\n  /**\n   * Called when the `gyp` child process exits.\n   */\n\n  function onCpExit (code, signal) {\n    if (code !== 0) {\n      callback(new Error('`gyp` failed with exit code: ' + code))\n    } else {\n      // we're done\n      callback()\n    }\n  }\n\n}\n\n/**\n * Returns the first file or directory from an array of candidates that is\n * readable by the current user, or undefined if none of the candidates are\n * readable.\n */\nfunction findAccessibleSync (logprefix, dir, candidates) {\n  for (var next = 0; next < candidates.length; next++) {\n     var candidate = path.resolve(dir, candidates[next])\n     try {\n       var fd = fs.openSync(candidate, 'r')\n     } catch (e) {\n       // this candidate was not found or not readable, do nothing\n       log.silly(logprefix, 'Could not open %s: %s', candidate, e.message)\n       continue\n     }\n     fs.closeSync(fd)\n     log.silly(logprefix, 'Found readable %s', candidate)\n     return candidate\n  }\n\n  return undefined\n}\n\nfunction PythonFinder(python, callback) {\n  this.callback = callback\n  this.python = python\n}\n\nPythonFinder.prototype = {\n  checkPythonLauncherDepth: 0,\n  env: process.env,\n  execFile: cp.execFile,\n  log: log,\n  resolve: path.win32 && path.win32.resolve || path.resolve,\n  stat: fs.stat,\n  which: which,\n  win: win,\n\n  checkPython: function checkPython () {\n    this.log.verbose('check python',\n                     'checking for Python executable \"%s\" in the PATH',\n                     this.python)\n    this.which(this.python, function (err, execPath) {\n      if (err) {\n        this.log.verbose('`which` failed', this.python, err)\n        if (this.python === 'python2') {\n          this.python = 'python'\n          return this.checkPython()\n        }\n        if (this.win) {\n          this.checkPythonLauncher()\n        } else {\n          this.failNoPython()\n        }\n      } else {\n        this.log.verbose('`which` succeeded', this.python, execPath)\n        // Found the `python` executable, and from now on we use it explicitly.\n        // This solves #667 and #750 (`execFile` won't run batch files\n        // (*.cmd, and *.bat))\n        this.python = execPath\n        this.checkPythonVersion()\n      }\n    }.bind(this))\n  },\n\n  // Distributions of Python on Windows by default install with the \"py.exe\"\n  // Python launcher which is more likely to exist than the Python executable\n  // being in the $PATH.\n  // Because the Python launcher supports all versions of Python, we have to\n  // explicitly request a Python 2 version. This is done by supplying \"-2\" as\n  // the first command line argument. Since \"py.exe -2\" would be an invalid\n  // executable for \"execFile\", we have to use the launcher to figure out\n  // where the actual \"python.exe\" executable is located.\n  checkPythonLauncher: function checkPythonLauncher () {\n    this.checkPythonLauncherDepth += 1\n\n    this.log.verbose(\n        'could not find \"' + this.python + '\". checking python launcher')\n    var env = extend({}, this.env)\n    env.TERM = 'dumb'\n\n    var launcherArgs = ['-2', '-c', 'import sys; print sys.executable']\n    this.execFile('py.exe', launcherArgs, { env: env }, function (err, stdout) {\n      if (err) {\n        this.guessPython()\n      } else {\n        this.python = stdout.trim()\n        this.log.verbose('check python launcher',\n                         'python executable found: %j',\n                         this.python)\n        this.checkPythonVersion()\n      }\n      this.checkPythonLauncherDepth -= 1\n    }.bind(this))\n  },\n\n  checkPythonVersion: function checkPythonVersion () {\n    var args = ['-c', 'import sys; print \"%s.%s.%s\" % sys.version_info[:3];']\n    var env = extend({}, this.env)\n    env.TERM = 'dumb'\n\n    this.execFile(this.python, args, { env: env }, function (err, stdout) {\n      if (err) {\n        return this.callback(err)\n      }\n      this.log.verbose('check python version',\n                       '`%s -c \"' + args[1] + '\"` returned: %j',\n                       this.python, stdout)\n      var version = stdout.trim()\n      var range = semver.Range('>=2.5.0 <3.0.0')\n      var valid = false\n      try {\n        valid = range.test(version)\n      } catch (e) {\n        this.log.silly('range.test() error', e)\n      }\n      if (valid) {\n        this.callback(null, this.python)\n      } else if (this.win && this.checkPythonLauncherDepth === 0) {\n        this.checkPythonLauncher()\n      } else {\n        this.failPythonVersion(version)\n      }\n    }.bind(this))\n  },\n\n  failNoPython: function failNoPython () {\n    var errmsg =\n        'Can\\'t find Python executable \"' + this.python +\n        '\", you can set the PYTHON env variable.'\n    this.callback(new Error(errmsg))\n  },\n\n  failPythonVersion: function failPythonVersion (badVersion) {\n    var errmsg =\n        'Python executable \"' + this.python +\n        '\" is v' + badVersion + ', which is not supported by gyp.\\n' +\n        'You can pass the --python switch to point to ' +\n        'Python >= v2.5.0 & < 3.0.0.'\n    this.callback(new Error(errmsg))\n  },\n\n  // Called on Windows when \"python\" isn't available in the current $PATH.\n  // We are going to check if \"%SystemDrive%\\python27\\python.exe\" exists.\n  guessPython: function guessPython () {\n    this.log.verbose('could not find \"' + this.python + '\". guessing location')\n    var rootDir = this.env.SystemDrive || 'C:\\\\'\n    if (rootDir[rootDir.length - 1] !== '\\\\') {\n      rootDir += '\\\\'\n    }\n    var pythonPath = this.resolve(rootDir, 'Python27', 'python.exe')\n    this.log.verbose('ensuring that file exists:', pythonPath)\n    this.stat(pythonPath, function (err, stat) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          this.failNoPython()\n        } else {\n          this.callback(err)\n        }\n        return\n      }\n      this.python = pythonPath\n      this.checkPythonVersion()\n    }.bind(this))\n  },\n}\n\nfunction findPython (python, callback) {\n  var finder = new PythonFinder(python, callback)\n  finder.checkPython()\n}\n"]},"metadata":{},"sourceType":"script"}