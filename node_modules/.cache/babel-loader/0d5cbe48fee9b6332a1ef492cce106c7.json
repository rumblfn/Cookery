{"ast":null,"code":"module.exports = exports = remove;\nexports.usage = 'Removes the node development files for the specified version';\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs'),\n    rm = require('rimraf'),\n    path = require('path'),\n    log = require('npmlog'),\n    semver = require('semver');\n\nfunction remove(gyp, argv, callback) {\n  var devDir = gyp.devDir;\n  log.verbose('remove', 'using node-gyp dir:', devDir); // get the user-specified version to remove\n\n  var version = argv[0] || gyp.opts.target;\n  log.verbose('remove', 'removing target version:', version);\n\n  if (!version) {\n    return callback(new Error('You must specify a version number to remove. Ex: \"' + process.version + '\"'));\n  }\n\n  var versionSemver = semver.parse(version);\n\n  if (versionSemver) {\n    // flatten the version Array into a String\n    version = versionSemver.version;\n  }\n\n  var versionPath = path.resolve(gyp.devDir, version);\n  log.verbose('remove', 'removing development files for version:', version); // first check if its even installed\n\n  fs.stat(versionPath, function (err, stat) {\n    if (err) {\n      if (err.code == 'ENOENT') {\n        callback(null, 'version was already uninstalled: ' + version);\n      } else {\n        callback(err);\n      }\n\n      return;\n    } // Go ahead and delete the dir\n\n\n    rm(versionPath, callback);\n  });\n}","map":{"version":3,"sources":["/Users/samilvaliahmetov/education/programming/schoolProject/my-app/node_modules/node-gyp/lib/remove.js"],"names":["module","exports","remove","usage","fs","require","rm","path","log","semver","gyp","argv","callback","devDir","verbose","version","opts","target","Error","process","versionSemver","parse","versionPath","resolve","stat","err","code"],"mappings":"AACAA,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAGC,MAA3B;AAEAD,OAAO,CAACE,KAAR,GAAgB,8DAAhB;AAEA;AACA;AACA;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;AAAA,IACIC,EAAE,GAAGD,OAAO,CAAC,QAAD,CADhB;AAAA,IAEIE,IAAI,GAAGF,OAAO,CAAC,MAAD,CAFlB;AAAA,IAGIG,GAAG,GAAGH,OAAO,CAAC,QAAD,CAHjB;AAAA,IAIII,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAJpB;;AAMA,SAASH,MAAT,CAAiBQ,GAAjB,EAAsBC,IAAtB,EAA4BC,QAA5B,EAAsC;AAEpC,MAAIC,MAAM,GAAGH,GAAG,CAACG,MAAjB;AACAL,EAAAA,GAAG,CAACM,OAAJ,CAAY,QAAZ,EAAsB,qBAAtB,EAA6CD,MAA7C,EAHoC,CAKpC;;AACA,MAAIE,OAAO,GAAGJ,IAAI,CAAC,CAAD,CAAJ,IAAWD,GAAG,CAACM,IAAJ,CAASC,MAAlC;AACAT,EAAAA,GAAG,CAACM,OAAJ,CAAY,QAAZ,EAAsB,0BAAtB,EAAkDC,OAAlD;;AAEA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOH,QAAQ,CAAC,IAAIM,KAAJ,CAAU,uDAAuDC,OAAO,CAACJ,OAA/D,GAAyE,GAAnF,CAAD,CAAf;AACD;;AAED,MAAIK,aAAa,GAAGX,MAAM,CAACY,KAAP,CAAaN,OAAb,CAApB;;AACA,MAAIK,aAAJ,EAAmB;AACjB;AACAL,IAAAA,OAAO,GAAGK,aAAa,CAACL,OAAxB;AACD;;AAED,MAAIO,WAAW,GAAGf,IAAI,CAACgB,OAAL,CAAab,GAAG,CAACG,MAAjB,EAAyBE,OAAzB,CAAlB;AACAP,EAAAA,GAAG,CAACM,OAAJ,CAAY,QAAZ,EAAsB,yCAAtB,EAAiEC,OAAjE,EApBoC,CAsBpC;;AACAX,EAAAA,EAAE,CAACoB,IAAH,CAAQF,WAAR,EAAqB,UAAUG,GAAV,EAAeD,IAAf,EAAqB;AACxC,QAAIC,GAAJ,EAAS;AACP,UAAIA,GAAG,CAACC,IAAJ,IAAY,QAAhB,EAA0B;AACxBd,QAAAA,QAAQ,CAAC,IAAD,EAAO,sCAAsCG,OAA7C,CAAR;AACD,OAFD,MAEO;AACLH,QAAAA,QAAQ,CAACa,GAAD,CAAR;AACD;;AACD;AACD,KARuC,CASxC;;;AACAnB,IAAAA,EAAE,CAACgB,WAAD,EAAcV,QAAd,CAAF;AACD,GAXD;AAaD","sourcesContent":["\nmodule.exports = exports = remove\n\nexports.usage = 'Removes the node development files for the specified version'\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('fs')\n  , rm = require('rimraf')\n  , path = require('path')\n  , log = require('npmlog')\n  , semver = require('semver')\n\nfunction remove (gyp, argv, callback) {\n\n  var devDir = gyp.devDir\n  log.verbose('remove', 'using node-gyp dir:', devDir)\n\n  // get the user-specified version to remove\n  var version = argv[0] || gyp.opts.target\n  log.verbose('remove', 'removing target version:', version)\n\n  if (!version) {\n    return callback(new Error('You must specify a version number to remove. Ex: \"' + process.version + '\"'))\n  }\n\n  var versionSemver = semver.parse(version)\n  if (versionSemver) {\n    // flatten the version Array into a String\n    version = versionSemver.version\n  }\n\n  var versionPath = path.resolve(gyp.devDir, version)\n  log.verbose('remove', 'removing development files for version:', version)\n\n  // first check if its even installed\n  fs.stat(versionPath, function (err, stat) {\n    if (err) {\n      if (err.code == 'ENOENT') {\n        callback(null, 'version was already uninstalled: ' + version)\n      } else {\n        callback(err)\n      }\n      return\n    }\n    // Go ahead and delete the dir\n    rm(versionPath, callback)\n  })\n\n}\n"]},"metadata":{},"sourceType":"script"}