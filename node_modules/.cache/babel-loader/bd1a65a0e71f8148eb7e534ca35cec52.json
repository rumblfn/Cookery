{"ast":null,"code":"var semver = require('semver'),\n    url = require('url'),\n    path = require('path'),\n    log = require('npmlog') // versions where -headers.tar.gz started shipping\n,\n    headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42',\n    bitsre = /\\/win-(x86|x64)\\//,\n    bitsreV3 = /\\/win-(x86|ia32|x64)\\//; // io.js v3.x.x shipped with \"ia32\" but should\n// have been \"x86\"\n// Captures all the logic required to determine download URLs, local directory and \n// file names. Inputs come from command-line switches (--target, --dist-url),\n// `process.version` and `process.release` where it exists.\n\n\nfunction processRelease(argv, gyp, defaultVersion, defaultRelease) {\n  var version = semver.valid(argv[0]) && argv[0] || gyp.opts.target || defaultVersion,\n      versionSemver = semver.parse(version),\n      overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl,\n      isDefaultVersion,\n      isIojs,\n      name,\n      distBaseUrl,\n      baseUrl,\n      libUrl32,\n      libUrl64,\n      tarballUrl,\n      canGetHeaders;\n\n  if (!versionSemver) {\n    // not a valid semver string, nothing we can do\n    return {\n      version: version\n    };\n  } // flatten version into String\n\n\n  version = versionSemver.version; // defaultVersion should come from process.version so ought to be valid semver\n\n  isDefaultVersion = version === semver.parse(defaultVersion).version; // can't use process.release if we're using --target=x.y.z\n\n  if (!isDefaultVersion) defaultRelease = null;\n\n  if (defaultRelease) {\n    // v3 onward, has process.release\n    name = defaultRelease.name.replace(/io\\.js/, 'iojs'); // remove the '.' for directory naming purposes\n\n    isIojs = name === 'iojs';\n  } else {\n    // old node or alternative --target=\n    // semver.satisfies() doesn't like prerelease tags so test major directly\n    isIojs = versionSemver.major >= 1 && versionSemver.major < 4;\n    name = isIojs ? 'iojs' : 'node';\n  } // check for the nvm.sh standard mirror env variables\n\n\n  if (!overrideDistUrl) {\n    if (isIojs) {\n      if (process.env.IOJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.IOJS_ORG_MIRROR;\n      } else if (process.env.NVM_IOJS_ORG_MIRROR) {\n        // remove on next semver-major\n        overrideDistUrl = process.env.NVM_IOJS_ORG_MIRROR;\n        log.warn('download', 'NVM_IOJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' + 'please use IOJS_ORG_MIRROR');\n      }\n    } else {\n      if (process.env.NODEJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.NODEJS_ORG_MIRROR;\n      } else if (process.env.NVM_NODEJS_ORG_MIRROR) {\n        // remove on next semver-major\n        overrideDistUrl = process.env.NVM_NODEJS_ORG_MIRROR;\n        log.warn('download', 'NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' + 'please use NODEJS_ORG_MIRROR');\n      }\n    }\n  }\n\n  if (overrideDistUrl) log.verbose('download', 'using dist-url', overrideDistUrl);\n  if (overrideDistUrl) distBaseUrl = overrideDistUrl.replace(/\\/+$/, '');else distBaseUrl = isIojs ? 'https://iojs.org/download/release' : 'https://nodejs.org/dist';\n  distBaseUrl += '/v' + version + '/'; // new style, based on process.release so we have a lot of the data we need\n\n  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {\n    baseUrl = url.resolve(defaultRelease.headersUrl, './');\n    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major);\n    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major);\n    return {\n      version: version,\n      semver: versionSemver,\n      name: name,\n      baseUrl: baseUrl,\n      tarballUrl: defaultRelease.headersUrl,\n      shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n      versionDir: (name !== 'node' ? name + '-' : '') + version,\n      libUrl32: libUrl32,\n      libUrl64: libUrl64,\n      libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n      libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n    };\n  } // older versions without process.release are captured here and we have to make\n  // a lot of assumptions, additionally if you --target=x.y.z then we can't use the\n  // current process.release\n\n\n  baseUrl = distBaseUrl;\n  libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major);\n  libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major); // making the bold assumption that anything with a version number >3.0.0 will\n  // have a *-headers.tar.gz file in its dist location, even some frankenstein\n  // custom version\n\n  canGetHeaders = semver.satisfies(versionSemver, headersTarballRange);\n  tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz');\n  return {\n    version: version,\n    semver: versionSemver,\n    name: name,\n    baseUrl: baseUrl,\n    tarballUrl: tarballUrl,\n    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n    versionDir: (name !== 'node' ? name + '-' : '') + version,\n    libUrl32: libUrl32,\n    libUrl64: libUrl64,\n    libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n    libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n  };\n}\n\nfunction normalizePath(p) {\n  return path.normalize(p).replace(/\\\\/g, '/');\n}\n\nfunction resolveLibUrl(name, defaultUrl, arch, versionMajor) {\n  var base = url.resolve(defaultUrl, './'),\n      hasLibUrl = bitsre.test(defaultUrl) || versionMajor === 3 && bitsreV3.test(defaultUrl);\n\n  if (!hasLibUrl) {\n    // let's assume it's a baseUrl then\n    if (versionMajor >= 1) return url.resolve(base, 'win-' + arch + '/' + name + '.lib'); // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/\n\n    return url.resolve(base, (arch === 'x64' ? 'x64/' : '') + name + '.lib');\n  } // else we have a proper url to a .lib, just make sure it's the right arch\n\n\n  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/');\n}\n\nmodule.exports = processRelease;","map":{"version":3,"sources":["/Users/samilvaliahmetov/education/programming/schoolProject/my-app/node_modules/node-gyp/lib/process-release.js"],"names":["semver","require","url","path","log","headersTarballRange","bitsre","bitsreV3","processRelease","argv","gyp","defaultVersion","defaultRelease","version","valid","opts","target","versionSemver","parse","overrideDistUrl","disturl","isDefaultVersion","isIojs","name","distBaseUrl","baseUrl","libUrl32","libUrl64","tarballUrl","canGetHeaders","replace","major","process","env","IOJS_ORG_MIRROR","NVM_IOJS_ORG_MIRROR","warn","NODEJS_ORG_MIRROR","NVM_NODEJS_ORG_MIRROR","verbose","headersUrl","resolve","resolveLibUrl","libUrl","shasumsUrl","versionDir","libPath32","normalizePath","relative","libPath64","satisfies","p","normalize","defaultUrl","arch","versionMajor","base","hasLibUrl","test","module","exports"],"mappings":"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","sourcesContent":["var semver = require('semver')\n  , url = require('url')\n  , path = require('path')\n  , log = require('npmlog')\n\n    // versions where -headers.tar.gz started shipping\n  , headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42'\n  , bitsre = /\\/win-(x86|x64)\\//\n  , bitsreV3 = /\\/win-(x86|ia32|x64)\\// // io.js v3.x.x shipped with \"ia32\" but should\n                                        // have been \"x86\"\n\n// Captures all the logic required to determine download URLs, local directory and \n// file names. Inputs come from command-line switches (--target, --dist-url),\n// `process.version` and `process.release` where it exists.\nfunction processRelease (argv, gyp, defaultVersion, defaultRelease) {\n  var version = (semver.valid(argv[0]) && argv[0]) || gyp.opts.target || defaultVersion\n    , versionSemver = semver.parse(version)\n    , overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl\n    , isDefaultVersion\n    , isIojs\n    , name\n    , distBaseUrl\n    , baseUrl\n    , libUrl32\n    , libUrl64\n    , tarballUrl\n    , canGetHeaders\n\n  if (!versionSemver) {\n    // not a valid semver string, nothing we can do\n    return { version: version }\n  }\n  // flatten version into String\n  version = versionSemver.version\n\n  // defaultVersion should come from process.version so ought to be valid semver\n  isDefaultVersion = version === semver.parse(defaultVersion).version\n\n  // can't use process.release if we're using --target=x.y.z\n  if (!isDefaultVersion)\n    defaultRelease = null\n\n  if (defaultRelease) {\n    // v3 onward, has process.release\n    name = defaultRelease.name.replace(/io\\.js/, 'iojs') // remove the '.' for directory naming purposes\n    isIojs = name === 'iojs'\n  } else {\n    // old node or alternative --target=\n    // semver.satisfies() doesn't like prerelease tags so test major directly\n    isIojs = versionSemver.major >= 1 && versionSemver.major < 4\n    name = isIojs ? 'iojs' : 'node'\n  }\n\n  // check for the nvm.sh standard mirror env variables\n  if (!overrideDistUrl) {\n    if (isIojs) {\n      if (process.env.IOJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.IOJS_ORG_MIRROR\n      } else if (process.env.NVM_IOJS_ORG_MIRROR) {// remove on next semver-major\n        overrideDistUrl = process.env.NVM_IOJS_ORG_MIRROR\n        log.warn('download',\n            'NVM_IOJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' +\n            'please use IOJS_ORG_MIRROR')\n      }\n    } else {\n      if (process.env.NODEJS_ORG_MIRROR) {\n        overrideDistUrl = process.env.NODEJS_ORG_MIRROR\n      } else if (process.env.NVM_NODEJS_ORG_MIRROR) {// remove on next semver-major\n        overrideDistUrl = process.env.NVM_NODEJS_ORG_MIRROR\n        log.warn('download',\n            'NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' +\n            'please use NODEJS_ORG_MIRROR')\n      }\n    }\n  }\n\n  if (overrideDistUrl)\n    log.verbose('download', 'using dist-url', overrideDistUrl)\n\n  if (overrideDistUrl)\n    distBaseUrl = overrideDistUrl.replace(/\\/+$/, '')\n  else\n    distBaseUrl = isIojs ? 'https://iojs.org/download/release' : 'https://nodejs.org/dist'\n  distBaseUrl += '/v' + version + '/'\n\n  // new style, based on process.release so we have a lot of the data we need\n  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {\n    baseUrl = url.resolve(defaultRelease.headersUrl, './')\n    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major)\n    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major)\n\n    return {\n      version: version,\n      semver: versionSemver,\n      name: name,\n      baseUrl: baseUrl,\n      tarballUrl: defaultRelease.headersUrl,\n      shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n      versionDir: (name !== 'node' ? name + '-' : '') + version,\n      libUrl32: libUrl32,\n      libUrl64: libUrl64,\n      libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n      libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n    }\n  }\n\n  // older versions without process.release are captured here and we have to make\n  // a lot of assumptions, additionally if you --target=x.y.z then we can't use the\n  // current process.release\n\n  baseUrl = distBaseUrl\n  libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major)\n  libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major)\n  // making the bold assumption that anything with a version number >3.0.0 will\n  // have a *-headers.tar.gz file in its dist location, even some frankenstein\n  // custom version\n  canGetHeaders = semver.satisfies(versionSemver, headersTarballRange)\n  tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz')\n\n  return {\n    version: version,\n    semver: versionSemver,\n    name: name,\n    baseUrl: baseUrl,\n    tarballUrl: tarballUrl,\n    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),\n    versionDir: (name !== 'node' ? name + '-' : '') + version,\n    libUrl32: libUrl32,\n    libUrl64: libUrl64,\n    libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),\n    libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))\n  }\n}\n\nfunction normalizePath (p) {\n  return path.normalize(p).replace(/\\\\/g, '/')\n}\n\nfunction resolveLibUrl (name, defaultUrl, arch, versionMajor) {\n  var base = url.resolve(defaultUrl, './')\n    , hasLibUrl = bitsre.test(defaultUrl) || (versionMajor === 3 && bitsreV3.test(defaultUrl))\n\n  if (!hasLibUrl) {\n    // let's assume it's a baseUrl then\n    if (versionMajor >= 1)\n      return url.resolve(base, 'win-' + arch  +'/' + name + '.lib')\n    // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/\n    return url.resolve(base, (arch === 'x64' ? 'x64/' : '') + name + '.lib')\n  }\n\n  // else we have a proper url to a .lib, just make sure it's the right arch\n  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/')\n}\n\nmodule.exports = processRelease\n"]},"metadata":{},"sourceType":"script"}