{"ast":null,"code":"module.exports = exports = build;\n/**\n * Module dependencies.\n */\n\nvar fs = require('graceful-fs'),\n    rm = require('rimraf'),\n    path = require('path'),\n    glob = require('glob'),\n    log = require('npmlog'),\n    which = require('which'),\n    exec = require('child_process').exec,\n    processRelease = require('./process-release'),\n    win = process.platform === 'win32';\n\nexports.usage = 'Invokes `' + (win ? 'msbuild' : 'make') + '` and builds the module';\n\nfunction build(gyp, argv, callback) {\n  var platformMake = 'make';\n\n  if (process.platform === 'aix') {\n    platformMake = 'gmake';\n  } else if (process.platform.indexOf('bsd') !== -1) {\n    platformMake = 'gmake';\n  } else if (win && argv.length > 0) {\n    argv = argv.map(function (target) {\n      return '/t:' + target;\n    });\n  }\n\n  var release = processRelease(argv, gyp, process.version, process.release),\n      makeCommand = gyp.opts.make || process.env.MAKE || platformMake,\n      command = win ? 'msbuild' : makeCommand,\n      buildDir = path.resolve('build'),\n      configPath = path.resolve(buildDir, 'config.gypi'),\n      jobs = gyp.opts.jobs || process.env.JOBS,\n      buildType,\n      config,\n      arch,\n      nodeDir;\n  loadConfigGypi();\n  /**\n   * Load the \"config.gypi\" file that was generated during \"configure\".\n   */\n\n  function loadConfigGypi() {\n    fs.readFile(configPath, 'utf8', function (err, data) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          callback(new Error('You must run `node-gyp configure` first!'));\n        } else {\n          callback(err);\n        }\n\n        return;\n      }\n\n      config = JSON.parse(data.replace(/\\#.+\\n/, '')); // get the 'arch', 'buildType', and 'nodeDir' vars from the config\n\n      buildType = config.target_defaults.default_configuration;\n      arch = config.variables.target_arch;\n      nodeDir = config.variables.nodedir;\n\n      if ('debug' in gyp.opts) {\n        buildType = gyp.opts.debug ? 'Debug' : 'Release';\n      }\n\n      if (!buildType) {\n        buildType = 'Release';\n      }\n\n      log.verbose('build type', buildType);\n      log.verbose('architecture', arch);\n      log.verbose('node dev dir', nodeDir);\n\n      if (win) {\n        findSolutionFile();\n      } else {\n        doWhich();\n      }\n    });\n  }\n  /**\n   * On Windows, find the first build/*.sln file.\n   */\n\n\n  function findSolutionFile() {\n    glob('build/*.sln', function (err, files) {\n      if (err) return callback(err);\n\n      if (files.length === 0) {\n        return callback(new Error('Could not find *.sln file. Did you run \"configure\"?'));\n      }\n\n      guessedSolution = files[0];\n      log.verbose('found first Solution file', guessedSolution);\n      doWhich();\n    });\n  }\n  /**\n   * Uses node-which to locate the msbuild / make executable.\n   */\n\n\n  function doWhich() {\n    // First make sure we have the build command in the PATH\n    which(command, function (err, execPath) {\n      if (err) {\n        if (win && /not found/.test(err.message)) {\n          // On windows and no 'msbuild' found. Let's guess where it is\n          findMsbuild();\n        } else {\n          // Some other error or 'make' not found on Unix, report that to the user\n          callback(err);\n        }\n\n        return;\n      }\n\n      log.verbose('`which` succeeded for `' + command + '`', execPath);\n      doBuild();\n    });\n  }\n  /**\n   * Search for the location of \"msbuild.exe\" file on Windows.\n   */\n\n\n  function findMsbuild() {\n    if (config.variables.msbuild_path) {\n      command = config.variables.msbuild_path;\n      log.verbose('using MSBuild:', command);\n      doBuild();\n      return;\n    }\n\n    log.verbose('could not find \"msbuild.exe\" in PATH - finding location in registry');\n    var notfoundErr = 'Can\\'t find \"msbuild.exe\". Do you have Microsoft Visual Studio C++ 2008+ installed?';\n    var cmd = 'reg query \"HKLM\\\\Software\\\\Microsoft\\\\MSBuild\\\\ToolsVersions\" /s';\n    if (process.arch !== 'ia32') cmd += ' /reg:32';\n    exec(cmd, function (err, stdout, stderr) {\n      if (err) {\n        return callback(new Error(err.message + '\\n' + notfoundErr));\n      }\n\n      var reVers = /ToolsVersions\\\\([^\\\\]+)$/i,\n          rePath = /\\r\\n[ \\t]+MSBuildToolsPath[ \\t]+REG_SZ[ \\t]+([^\\r]+)/i,\n          msbuilds = [],\n          r,\n          msbuildPath;\n      stdout.split('\\r\\n\\r\\n').forEach(function (l) {\n        if (!l) return;\n        l = l.trim();\n\n        if (r = reVers.exec(l.substring(0, l.indexOf('\\r\\n')))) {\n          var ver = parseFloat(r[1], 10);\n\n          if (ver >= 3.5) {\n            if (r = rePath.exec(l)) {\n              msbuilds.push({\n                version: ver,\n                path: r[1]\n              });\n            }\n          }\n        }\n      });\n      msbuilds.sort(function (x, y) {\n        return x.version < y.version ? -1 : 1;\n      });\n\n      (function verifyMsbuild() {\n        if (!msbuilds.length) return callback(new Error(notfoundErr));\n        msbuildPath = path.resolve(msbuilds.pop().path, 'msbuild.exe');\n        fs.stat(msbuildPath, function (err, stat) {\n          if (err) {\n            if (err.code == 'ENOENT') {\n              if (msbuilds.length) {\n                return verifyMsbuild();\n              } else {\n                callback(new Error(notfoundErr));\n              }\n            } else {\n              callback(err);\n            }\n\n            return;\n          }\n\n          command = msbuildPath;\n          doBuild();\n        });\n      })();\n    });\n  }\n  /**\n   * Actually spawn the process and compile the module.\n   */\n\n\n  function doBuild() {\n    // Enable Verbose build\n    var verbose = log.levels[log.level] <= log.levels.verbose;\n\n    if (!win && verbose) {\n      argv.push('V=1');\n    }\n\n    if (win && !verbose) {\n      argv.push('/clp:Verbosity=minimal');\n    }\n\n    if (win) {\n      // Turn off the Microsoft logo on Windows\n      argv.push('/nologo');\n    } // Specify the build type, Release by default\n\n\n    if (win) {\n      var archLower = arch.toLowerCase();\n      var p = archLower === 'x64' ? 'x64' : archLower === 'arm' ? 'ARM' : 'Win32';\n      argv.push('/p:Configuration=' + buildType + ';Platform=' + p);\n\n      if (jobs) {\n        var j = parseInt(jobs, 10);\n\n        if (!isNaN(j) && j > 0) {\n          argv.push('/m:' + j);\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('/m:' + require('os').cpus().length);\n        }\n      }\n    } else {\n      argv.push('BUILDTYPE=' + buildType); // Invoke the Makefile in the 'build' dir.\n\n      argv.push('-C');\n      argv.push('build');\n\n      if (jobs) {\n        var j = parseInt(jobs, 10);\n\n        if (!isNaN(j) && j > 0) {\n          argv.push('--jobs');\n          argv.push(j);\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('--jobs');\n          argv.push(require('os').cpus().length);\n        }\n      }\n    }\n\n    if (win) {\n      // did the user specify their own .sln file?\n      var hasSln = argv.some(function (arg) {\n        return path.extname(arg) == '.sln';\n      });\n\n      if (!hasSln) {\n        argv.unshift(gyp.opts.solution || guessedSolution);\n      }\n    }\n\n    var proc = gyp.spawn(command, argv);\n    proc.on('exit', onExit);\n  }\n  /**\n   * Invoked after the make/msbuild command exits.\n   */\n\n\n  function onExit(code, signal) {\n    if (code !== 0) {\n      return callback(new Error('`' + command + '` failed with exit code: ' + code));\n    }\n\n    if (signal) {\n      return callback(new Error('`' + command + '` got signal: ' + signal));\n    }\n\n    callback();\n  }\n}","map":{"version":3,"sources":["/Users/samilvaliahmetov/education/programming/schoolProject/my-app/node_modules/node-gyp/lib/build.js"],"names":["module","exports","build","fs","require","rm","path","glob","log","which","exec","processRelease","win","process","platform","usage","gyp","argv","callback","platformMake","indexOf","length","map","target","release","version","makeCommand","opts","make","env","MAKE","command","buildDir","resolve","configPath","jobs","JOBS","buildType","config","arch","nodeDir","loadConfigGypi","readFile","err","data","code","Error","JSON","parse","replace","target_defaults","default_configuration","variables","target_arch","nodedir","debug","verbose","findSolutionFile","doWhich","files","guessedSolution","execPath","test","message","findMsbuild","doBuild","msbuild_path","notfoundErr","cmd","stdout","stderr","reVers","rePath","msbuilds","r","msbuildPath","split","forEach","l","trim","substring","ver","parseFloat","push","sort","x","y","verifyMsbuild","pop","stat","levels","level","archLower","toLowerCase","p","j","parseInt","isNaN","toUpperCase","cpus","hasSln","some","arg","extname","unshift","solution","proc","spawn","on","onExit","signal"],"mappings":"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","sourcesContent":["\nmodule.exports = exports = build\n\n/**\n * Module dependencies.\n */\n\nvar fs = require('graceful-fs')\n  , rm = require('rimraf')\n  , path = require('path')\n  , glob = require('glob')\n  , log = require('npmlog')\n  , which = require('which')\n  , exec = require('child_process').exec\n  , processRelease = require('./process-release')\n  , win = process.platform === 'win32'\n\nexports.usage = 'Invokes `' + (win ? 'msbuild' : 'make') + '` and builds the module'\n\nfunction build (gyp, argv, callback) {\n  var platformMake = 'make'\n  if (process.platform === 'aix') {\n    platformMake = 'gmake'\n  } else if (process.platform.indexOf('bsd') !== -1) {\n    platformMake = 'gmake'\n  } else if (win && argv.length > 0) {\n    argv = argv.map(function(target) {\n      return '/t:' + target\n    })\n  }\n\n  var release = processRelease(argv, gyp, process.version, process.release)\n    , makeCommand = gyp.opts.make || process.env.MAKE || platformMake\n    , command = win ? 'msbuild' : makeCommand\n    , buildDir = path.resolve('build')\n    , configPath = path.resolve(buildDir, 'config.gypi')\n    , jobs = gyp.opts.jobs || process.env.JOBS\n    , buildType\n    , config\n    , arch\n    , nodeDir\n\n  loadConfigGypi()\n\n  /**\n   * Load the \"config.gypi\" file that was generated during \"configure\".\n   */\n\n  function loadConfigGypi () {\n    fs.readFile(configPath, 'utf8', function (err, data) {\n      if (err) {\n        if (err.code == 'ENOENT') {\n          callback(new Error('You must run `node-gyp configure` first!'))\n        } else {\n          callback(err)\n        }\n        return\n      }\n      config = JSON.parse(data.replace(/\\#.+\\n/, ''))\n\n      // get the 'arch', 'buildType', and 'nodeDir' vars from the config\n      buildType = config.target_defaults.default_configuration\n      arch = config.variables.target_arch\n      nodeDir = config.variables.nodedir\n\n      if ('debug' in gyp.opts) {\n        buildType = gyp.opts.debug ? 'Debug' : 'Release'\n      }\n      if (!buildType) {\n        buildType = 'Release'\n      }\n\n      log.verbose('build type', buildType)\n      log.verbose('architecture', arch)\n      log.verbose('node dev dir', nodeDir)\n\n      if (win) {\n        findSolutionFile()\n      } else {\n        doWhich()\n      }\n    })\n  }\n\n  /**\n   * On Windows, find the first build/*.sln file.\n   */\n\n  function findSolutionFile () {\n    glob('build/*.sln', function (err, files) {\n      if (err) return callback(err)\n      if (files.length === 0) {\n        return callback(new Error('Could not find *.sln file. Did you run \"configure\"?'))\n      }\n      guessedSolution = files[0]\n      log.verbose('found first Solution file', guessedSolution)\n      doWhich()\n    })\n  }\n\n  /**\n   * Uses node-which to locate the msbuild / make executable.\n   */\n\n  function doWhich () {\n    // First make sure we have the build command in the PATH\n    which(command, function (err, execPath) {\n      if (err) {\n        if (win && /not found/.test(err.message)) {\n          // On windows and no 'msbuild' found. Let's guess where it is\n          findMsbuild()\n        } else {\n          // Some other error or 'make' not found on Unix, report that to the user\n          callback(err)\n        }\n        return\n      }\n      log.verbose('`which` succeeded for `' + command + '`', execPath)\n      doBuild()\n    })\n  }\n\n  /**\n   * Search for the location of \"msbuild.exe\" file on Windows.\n   */\n\n  function findMsbuild () {\n    if (config.variables.msbuild_path) {\n      command = config.variables.msbuild_path\n      log.verbose('using MSBuild:', command)\n      doBuild()\n      return\n    }\n\n    log.verbose('could not find \"msbuild.exe\" in PATH - finding location in registry')\n    var notfoundErr = 'Can\\'t find \"msbuild.exe\". Do you have Microsoft Visual Studio C++ 2008+ installed?'\n    var cmd = 'reg query \"HKLM\\\\Software\\\\Microsoft\\\\MSBuild\\\\ToolsVersions\" /s'\n    if (process.arch !== 'ia32')\n      cmd += ' /reg:32'\n    exec(cmd, function (err, stdout, stderr) {\n      if (err) {\n        return callback(new Error(err.message + '\\n' + notfoundErr))\n      }\n      var reVers = /ToolsVersions\\\\([^\\\\]+)$/i\n        , rePath = /\\r\\n[ \\t]+MSBuildToolsPath[ \\t]+REG_SZ[ \\t]+([^\\r]+)/i\n        , msbuilds = []\n        , r\n        , msbuildPath\n      stdout.split('\\r\\n\\r\\n').forEach(function(l) {\n        if (!l) return\n        l = l.trim()\n        if (r = reVers.exec(l.substring(0, l.indexOf('\\r\\n')))) {\n          var ver = parseFloat(r[1], 10)\n          if (ver >= 3.5) {\n            if (r = rePath.exec(l)) {\n              msbuilds.push({\n                version: ver,\n                path: r[1]\n              })\n            }\n          }\n        }\n      })\n      msbuilds.sort(function (x, y) {\n        return (x.version < y.version ? -1 : 1)\n      })\n      ;(function verifyMsbuild () {\n        if (!msbuilds.length) return callback(new Error(notfoundErr))\n        msbuildPath = path.resolve(msbuilds.pop().path, 'msbuild.exe')\n        fs.stat(msbuildPath, function (err, stat) {\n          if (err) {\n            if (err.code == 'ENOENT') {\n              if (msbuilds.length) {\n                return verifyMsbuild()\n              } else {\n                callback(new Error(notfoundErr))\n              }\n            } else {\n              callback(err)\n            }\n            return\n          }\n          command = msbuildPath\n          doBuild()\n        })\n      })()\n    })\n  }\n\n\n  /**\n   * Actually spawn the process and compile the module.\n   */\n\n  function doBuild () {\n\n    // Enable Verbose build\n    var verbose = log.levels[log.level] <= log.levels.verbose\n    if (!win && verbose) {\n      argv.push('V=1')\n    }\n    if (win && !verbose) {\n      argv.push('/clp:Verbosity=minimal')\n    }\n\n    if (win) {\n      // Turn off the Microsoft logo on Windows\n      argv.push('/nologo')\n    }\n\n    // Specify the build type, Release by default\n    if (win) {\n      var archLower = arch.toLowerCase()\n      var p = archLower === 'x64' ? 'x64' :\n              (archLower === 'arm' ? 'ARM' : 'Win32')\n      argv.push('/p:Configuration=' + buildType + ';Platform=' + p)\n      if (jobs) {\n        var j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('/m:' + j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('/m:' + require('os').cpus().length)\n        }\n      }\n    } else {\n      argv.push('BUILDTYPE=' + buildType)\n      // Invoke the Makefile in the 'build' dir.\n      argv.push('-C')\n      argv.push('build')\n      if (jobs) {\n        var j = parseInt(jobs, 10)\n        if (!isNaN(j) && j > 0) {\n          argv.push('--jobs')\n          argv.push(j)\n        } else if (jobs.toUpperCase() === 'MAX') {\n          argv.push('--jobs')\n          argv.push(require('os').cpus().length)\n        }\n      }\n    }\n\n    if (win) {\n      // did the user specify their own .sln file?\n      var hasSln = argv.some(function (arg) {\n        return path.extname(arg) == '.sln'\n      })\n      if (!hasSln) {\n        argv.unshift(gyp.opts.solution || guessedSolution)\n      }\n    }\n\n    var proc = gyp.spawn(command, argv)\n    proc.on('exit', onExit)\n  }\n\n  /**\n   * Invoked after the make/msbuild command exits.\n   */\n\n  function onExit (code, signal) {\n    if (code !== 0) {\n      return callback(new Error('`' + command + '` failed with exit code: ' + code))\n    }\n    if (signal) {\n      return callback(new Error('`' + command + '` got signal: ' + signal))\n    }\n    callback()\n  }\n\n}\n"]},"metadata":{},"sourceType":"script"}