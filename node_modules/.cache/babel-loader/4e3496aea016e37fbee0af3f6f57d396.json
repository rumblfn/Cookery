{"ast":null,"code":"// Inspired by https://github.com/tlrobinson/long-stack-traces\nvar util = require('util');\n\nfunction extendTrace(object, property, pos) {\n  var old = object[property];\n\n  object[property] = function () {\n    var error = new Error();\n    var name = object.constructor.name + '#' + property + '(' + Array.prototype.slice.call(arguments).map(function (el) {\n      return util.inspect(el, false, 0);\n    }).join(', ') + ')';\n    if (typeof pos === 'undefined') pos = -1;\n    if (pos < 0) pos += arguments.length;\n    var cb = arguments[pos];\n\n    if (typeof arguments[pos] === 'function') {\n      arguments[pos] = function replacement() {\n        var err = arguments[0];\n\n        if (err && err.stack && !err.__augmented) {\n          err.stack = filter(err).join('\\n');\n          err.stack += '\\n--> in ' + name;\n          err.stack += '\\n' + filter(error).slice(1).join('\\n');\n          err.__augmented = true;\n        }\n\n        return cb.apply(this, arguments);\n      };\n    }\n\n    return old.apply(this, arguments);\n  };\n}\n\nexports.extendTrace = extendTrace;\n\nfunction filter(error) {\n  return error.stack.split('\\n').filter(function (line) {\n    return line.indexOf(__filename) < 0;\n  });\n}","map":{"version":3,"sources":["/Users/samilvaliahmetov/education/programming/schoolProject/my-app/node_modules/sqlite3/lib/trace.js"],"names":["util","require","extendTrace","object","property","pos","old","error","Error","name","constructor","Array","prototype","slice","call","arguments","map","el","inspect","join","length","cb","replacement","err","stack","__augmented","filter","apply","exports","split","line","indexOf","__filename"],"mappings":"AAAA;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,GAAvC,EAA4C;AACxC,MAAIC,GAAG,GAAGH,MAAM,CAACC,QAAD,CAAhB;;AACAD,EAAAA,MAAM,CAACC,QAAD,CAAN,GAAmB,YAAW;AAC1B,QAAIG,KAAK,GAAG,IAAIC,KAAJ,EAAZ;AACA,QAAIC,IAAI,GAAGN,MAAM,CAACO,WAAP,CAAmBD,IAAnB,GAA0B,GAA1B,GAAgCL,QAAhC,GAA2C,GAA3C,GACPO,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsCC,GAAtC,CAA0C,UAASC,EAAT,EAAa;AACnD,aAAOjB,IAAI,CAACkB,OAAL,CAAaD,EAAb,EAAiB,KAAjB,EAAwB,CAAxB,CAAP;AACH,KAFD,EAEGE,IAFH,CAEQ,IAFR,CADO,GAGS,GAHpB;AAKA,QAAI,OAAOd,GAAP,KAAe,WAAnB,EAAgCA,GAAG,GAAG,CAAC,CAAP;AAChC,QAAIA,GAAG,GAAG,CAAV,EAAaA,GAAG,IAAIU,SAAS,CAACK,MAAjB;AACb,QAAIC,EAAE,GAAGN,SAAS,CAACV,GAAD,CAAlB;;AACA,QAAI,OAAOU,SAAS,CAACV,GAAD,CAAhB,KAA0B,UAA9B,EAA0C;AACtCU,MAAAA,SAAS,CAACV,GAAD,CAAT,GAAiB,SAASiB,WAAT,GAAuB;AACpC,YAAIC,GAAG,GAAGR,SAAS,CAAC,CAAD,CAAnB;;AACA,YAAIQ,GAAG,IAAIA,GAAG,CAACC,KAAX,IAAoB,CAACD,GAAG,CAACE,WAA7B,EAA0C;AACtCF,UAAAA,GAAG,CAACC,KAAJ,GAAYE,MAAM,CAACH,GAAD,CAAN,CAAYJ,IAAZ,CAAiB,IAAjB,CAAZ;AACAI,UAAAA,GAAG,CAACC,KAAJ,IAAa,cAAcf,IAA3B;AACAc,UAAAA,GAAG,CAACC,KAAJ,IAAa,OAAOE,MAAM,CAACnB,KAAD,CAAN,CAAcM,KAAd,CAAoB,CAApB,EAAuBM,IAAvB,CAA4B,IAA5B,CAApB;AACAI,UAAAA,GAAG,CAACE,WAAJ,GAAkB,IAAlB;AACH;;AACD,eAAOJ,EAAE,CAACM,KAAH,CAAS,IAAT,EAAeZ,SAAf,CAAP;AACH,OATD;AAUH;;AACD,WAAOT,GAAG,CAACqB,KAAJ,CAAU,IAAV,EAAgBZ,SAAhB,CAAP;AACH,GAvBD;AAwBH;;AACDa,OAAO,CAAC1B,WAAR,GAAsBA,WAAtB;;AAGA,SAASwB,MAAT,CAAgBnB,KAAhB,EAAuB;AACnB,SAAOA,KAAK,CAACiB,KAAN,CAAYK,KAAZ,CAAkB,IAAlB,EAAwBH,MAAxB,CAA+B,UAASI,IAAT,EAAe;AACjD,WAAOA,IAAI,CAACC,OAAL,CAAaC,UAAb,IAA2B,CAAlC;AACH,GAFM,CAAP;AAGH","sourcesContent":["// Inspired by https://github.com/tlrobinson/long-stack-traces\nvar util = require('util');\n\nfunction extendTrace(object, property, pos) {\n    var old = object[property];\n    object[property] = function() {\n        var error = new Error();\n        var name = object.constructor.name + '#' + property + '(' + \n            Array.prototype.slice.call(arguments).map(function(el) {\n                return util.inspect(el, false, 0);\n            }).join(', ') + ')';\n\n        if (typeof pos === 'undefined') pos = -1;\n        if (pos < 0) pos += arguments.length;\n        var cb = arguments[pos];\n        if (typeof arguments[pos] === 'function') {\n            arguments[pos] = function replacement() {\n                var err = arguments[0];\n                if (err && err.stack && !err.__augmented) {\n                    err.stack = filter(err).join('\\n');\n                    err.stack += '\\n--> in ' + name;\n                    err.stack += '\\n' + filter(error).slice(1).join('\\n');\n                    err.__augmented = true;\n                }\n                return cb.apply(this, arguments);\n            };\n        }\n        return old.apply(this, arguments);\n    };\n}\nexports.extendTrace = extendTrace;\n\n\nfunction filter(error) {\n    return error.stack.split('\\n').filter(function(line) {\n        return line.indexOf(__filename) < 0;\n    });\n}\n"]},"metadata":{},"sourceType":"script"}